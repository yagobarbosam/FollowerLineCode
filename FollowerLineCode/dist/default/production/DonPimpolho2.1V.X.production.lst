

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Sep 30 21:52:37 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           	psect	idataBANK0
    42  000DAE                     __pidataBANK0:
    43                           	opt stack 0
    44                           
    45                           ;initializer for _MIN_sensorns
    46  000DAE  FFFF               	dw	65535
    47  000DB0  FFFF               	dw	65535
    48  000DB2  FFFF               	dw	65535
    49  000DB4  FFFF               	dw	65535
    50  000DB6  FFFF               	dw	65535
    51  000DB8  FFFF               	dw	65535
    52  000DBA  FFFF               	dw	65535
    53  000DBC  FFFF               	dw	65535
    54                           
    55                           ;initializer for _second_portion
    56  000DBE  0000               	dw	0
    57  000DC0  0029               	dw	41
    58  000DC2  0052               	dw	82
    59  000DC4  007C               	dw	124
    60  000DC6  00A5               	dw	165
    61  000DC8  00CF               	dw	207
    62  000DCA  00F8               	dw	248
    63  000DCC  0122               	dw	290
    64                           
    65                           ;initializer for conversorAD_config@F4451
    66  000DCE  01                 	db	1
    67  000DCF  02                 	db	2
    68  000DD0  04                 	db	4
    69  000DD1  08                 	db	8
    70  000DD2  20                 	db	32
    71  000DD3  01                 	db	1
    72  000DD4  02                 	db	2
    73  000DD5  04                 	db	4
    74  000DD6  04                 	db	4
    75  000DD7  08                 	db	8
    76  000DD8  02                 	db	2
    77  000DD9  10                 	db	16
    78  000DDA  01                 	db	1
    79  0000                     _ADCON0	set	4034
    80  0000                     _ADCON1	set	4033
    81  0000                     _ADRESH	set	4036
    82  0000                     _ADRESL	set	4035
    83  0000                     _BAUDCON	set	4024
    84  0000                     _PR2	set	4043
    85  0000                     _RCREG	set	4014
    86  0000                     _RCSTA	set	4011
    87  0000                     _SPBRG	set	4015
    88  0000                     _SPBRGH	set	4016
    89  0000                     _T0CON	set	4053
    90  0000                     _T2CON	set	4042
    91  0000                     _TMR0H	set	4055
    92  0000                     _TMR0L	set	4054
    93  0000                     _TXREG	set	4013
    94  0000                     _TXSTA	set	4012
    95  0000                     _PORTD	set	3971
    96  0000                     _TRISA	set	3986
    97  0000                     _TRISB	set	3987
    98  0000                     _TRISD	set	3989
    99  0000                     _TRISE	set	3990
   100  0000                     _ACQT0	set	32259
   101  0000                     _ACQT1	set	32260
   102  0000                     _ACQT2	set	32261
   103  0000                     _ADCS0	set	32256
   104  0000                     _ADCS1	set	32257
   105  0000                     _ADCS2	set	32258
   106  0000                     _ADFM	set	32263
   107  0000                     _ADON	set	32272
   108  0000                     _BRG16	set	32195
   109  0000                     _BRGH	set	32098
   110  0000                     _CREN	set	32092
   111  0000                     _DONE	set	32273
   112  0000                     _GIE	set	32663
   113  0000                     _GO	set	32273
   114  0000                     _IPEN	set	32391
   115  0000                     _OERR	set	32089
   116  0000                     _PSA	set	32427
   117  0000                     _RB0	set	31752
   118  0000                     _RC0	set	31760
   119  0000                     _RD1	set	31769
   120  0000                     _RD3	set	31771
   121  0000                     _RD5	set	31773
   122  0000                     _SREN	set	32093
   123  0000                     _SYNC	set	32100
   124  0000                     _T0CS	set	32429
   125  0000                     _T0SE	set	32428
   126  0000                     _TMR0IE	set	32661
   127  0000                     _TMR0IF	set	32658
   128  0000                     _TMR0IP	set	32650
   129  0000                     _TMR0ON	set	32431
   130  0000                     _TMR2IE	set	31977
   131  0000                     _TMR2IF	set	31985
   132  0000                     _TMR2IP	set	31993
   133  0000                     _TMR2ON	set	32338
   134  0000                     _TRISB0	set	31896
   135  0000                     _TRISC0	set	31904
   136  0000                     _TRISC6	set	31910
   137  0000                     _TRISC7	set	31911
   138  0000                     _TRISD1	set	31913
   139  0000                     _TRISD3	set	31915
   140  0000                     _TRISD5	set	31917
   141  0000                     _TXIF	set	31988
   142                           
   143                           ; #config settings
   144  0000                     
   145                           	psect	cinit
   146  000CAA                     __pcinit:
   147                           	opt stack 0
   148  000CAA                     start_initialization:
   149                           	opt stack 0
   150  000CAA                     __initialization:
   151                           	opt stack 0
   152                           
   153                           ; Clear objects allocated to BANK0 (60 bytes)
   154  000CAA  EE00  F060         	lfsr	0,__pbssBANK0
   155  000CAE  0E3C               	movlw	60
   156  000CB0                     clear_0:
   157  000CB0  6AEE               	clrf	postinc0,c
   158  000CB2  06E8               	decf	wreg,f,c
   159  000CB4  E1FD               	bnz	clear_0
   160                           
   161                           ; Clear objects allocated to COMRAM (18 bytes)
   162  000CB6  EE00  F032         	lfsr	0,__pbssCOMRAM
   163  000CBA  0E12               	movlw	18
   164  000CBC                     clear_1:
   165  000CBC  6AEE               	clrf	postinc0,c
   166  000CBE  06E8               	decf	wreg,f,c
   167  000CC0  E1FD               	bnz	clear_1
   168                           
   169                           ; Initialize objects allocated to BANK0 (45 bytes)
   170                           ; load TBLPTR registers with __pidataBANK0
   171  000CC2  0EAE               	movlw	low __pidataBANK0
   172  000CC4  6EF6               	movwf	tblptrl,c
   173  000CC6  0E0D               	movlw	high __pidataBANK0
   174  000CC8  6EF7               	movwf	tblptrh,c
   175  000CCA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   176  000CCC  6EF8               	movwf	tblptru,c
   177  000CCE  EE00  F0D1         	lfsr	0,__pdataBANK0
   178  000CD2  EE10 F02D          	lfsr	1,45
   179  000CD6                     copy_data0:
   180  000CD6  0009               	tblrd		*+
   181  000CD8  CFF5 FFEE          	movff	tablat,postinc0
   182  000CDC  50E5               	movf	postdec1,w,c
   183  000CDE  50E1               	movf	fsr1l,w,c
   184  000CE0  E1FA               	bnz	copy_data0
   185  000CE2                     end_of_initialization:
   186                           	opt stack 0
   187  000CE2                     __end_of__initialization:
   188                           	opt stack 0
   189  000CE2  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   190  000CE4  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   191  000CE6  0100               	movlb	0
   192  000CE8  EFBF  F001         	goto	_main	;jump to C main() function
   193                           tblptru	equ	0xFF8
   194                           tblptrh	equ	0xFF7
   195                           tblptrl	equ	0xFF6
   196                           tablat	equ	0xFF5
   197                           postinc0	equ	0xFEE
   198                           wreg	equ	0xFE8
   199                           postdec1	equ	0xFE5
   200                           fsr1l	equ	0xFE1
   201                           
   202                           	psect	bssCOMRAM
   203  000032                     __pbssCOMRAM:
   204                           	opt stack 0
   205  000032                     _portA_p:
   206                           	opt stack 0
   207  000032                     	ds	2
   208  000034                     _portA_p0:
   209                           	opt stack 0
   210  000034                     	ds	2
   211  000036                     _portB_p:
   212                           	opt stack 0
   213  000036                     	ds	2
   214  000038                     _portB_p0:
   215                           	opt stack 0
   216  000038                     	ds	2
   217  00003A                     _true_duty0_A:
   218                           	opt stack 0
   219  00003A                     	ds	2
   220  00003C                     _true_duty0_B:
   221                           	opt stack 0
   222  00003C                     	ds	2
   223  00003E                     _mask_A:
   224                           	opt stack 0
   225  00003E                     	ds	1
   226  00003F                     _mask_A2:
   227                           	opt stack 0
   228  00003F                     	ds	1
   229  000040                     _mask_B:
   230                           	opt stack 0
   231  000040                     	ds	1
   232  000041                     _mask_B2:
   233                           	opt stack 0
   234  000041                     	ds	1
   235  000042                     _true_duty_A:
   236                           	opt stack 0
   237  000042                     	ds	1
   238  000043                     _true_duty_B:
   239                           	opt stack 0
   240  000043                     	ds	1
   241                           tblptru	equ	0xFF8
   242                           tblptrh	equ	0xFF7
   243                           tblptrl	equ	0xFF6
   244                           tablat	equ	0xFF5
   245                           postinc0	equ	0xFEE
   246                           wreg	equ	0xFE8
   247                           postdec1	equ	0xFE5
   248                           fsr1l	equ	0xFE1
   249                           
   250                           	psect	bssBANK0
   251  000060                     __pbssBANK0:
   252                           	opt stack 0
   253  000060                     _vals:
   254                           	opt stack 0
   255  000060                     	ds	30
   256  00007E                     _MAX_sensorns:
   257                           	opt stack 0
   258  00007E                     	ds	16
   259  00008E                     _sensor_bar:
   260                           	opt stack 0
   261  00008E                     	ds	8
   262  000096                     _pwm:
   263                           	opt stack 0
   264  000096                     	ds	4
   265  00009A                     _distance_line:
   266                           	opt stack 0
   267  00009A                     	ds	2
   268                           tblptru	equ	0xFF8
   269                           tblptrh	equ	0xFF7
   270                           tblptrl	equ	0xFF6
   271                           tablat	equ	0xFF5
   272                           postinc0	equ	0xFEE
   273                           wreg	equ	0xFE8
   274                           postdec1	equ	0xFE5
   275                           fsr1l	equ	0xFE1
   276                           
   277                           	psect	dataBANK0
   278  0000D1                     __pdataBANK0:
   279                           	opt stack 0
   280  0000D1                     _MIN_sensorns:
   281                           	opt stack 0
   282  0000D1                     	ds	16
   283  0000E1                     _second_portion:
   284                           	opt stack 0
   285  0000E1                     	ds	16
   286  0000F1                     conversorAD_config@F4451:
   287                           	opt stack 0
   288  0000F1                     	ds	13
   289                           tblptru	equ	0xFF8
   290                           tblptrh	equ	0xFF7
   291                           tblptrl	equ	0xFF6
   292                           tablat	equ	0xFF5
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           postdec1	equ	0xFE5
   296                           fsr1l	equ	0xFE1
   297                           
   298                           	psect	cstackBANK0
   299  00009C                     __pcstackBANK0:
   300                           	opt stack 0
   301  00009C                     conversorAD_config@port_mask:
   302                           	opt stack 0
   303                           
   304                           ; 13 bytes @ 0x0
   305  00009C                     	ds	13
   306  0000A9                     conversorAD_config@pos:
   307                           	opt stack 0
   308                           
   309                           ; 1 bytes @ 0xD
   310  0000A9                     	ds	1
   311  0000AA                     conversorAD_config@port_an:
   312                           	opt stack 0
   313                           
   314                           ; 26 bytes @ 0xE
   315  0000AA                     	ds	26
   316  0000C4                     conversorAD_config@i:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x28
   320  0000C4                     	ds	1
   321  0000C5                     main@j:
   322                           	opt stack 0
   323                           
   324                           ; 4 bytes @ 0x29
   325  0000C5                     	ds	4
   326  0000C9                     _main$824:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0x2D
   330  0000C9                     	ds	2
   331  0000CB                     _main$825:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x2F
   335  0000CB                     	ds	2
   336  0000CD                     main@filtered:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x31
   340  0000CD                     	ds	2
   341  0000CF                     main@valor:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x33
   345  0000CF                     	ds	2
   346                           tblptru	equ	0xFF8
   347                           tblptrh	equ	0xFF7
   348                           tblptrl	equ	0xFF6
   349                           tablat	equ	0xFF5
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           postdec1	equ	0xFE5
   353                           fsr1l	equ	0xFE1
   354                           
   355                           	psect	cstackCOMRAM
   356  000001                     __pcstackCOMRAM:
   357                           	opt stack 0
   358  000001                     ??_PWMtimer2_B:
   359  000001                     ??_PWMtimer0_B:
   360  000001                     
   361                           ; 0 bytes @ 0x0
   362  000001                     	ds	1
   363  000002                     PWMtimer2_B@duty:
   364                           	opt stack 0
   365  000002                     PWMtimer0_B@time:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x1
   369  000002                     	ds	2
   370  000004                     PWMtimer0_B@duty:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x3
   374  000004                     	ds	1
   375  000005                     ??_ISR:
   376                           
   377                           ; 0 bytes @ 0x4
   378  000005                     	ds	14
   379  000013                     ?_return_distanceLine:
   380                           	opt stack 0
   381  000013                     ?_valor_AD:
   382                           	opt stack 0
   383  000013                     ?___wmul:
   384                           	opt stack 0
   385  000013                     ?___awdiv:
   386                           	opt stack 0
   387  000013                     ?___lwdiv:
   388                           	opt stack 0
   389  000013                     ?___aldiv:
   390                           	opt stack 0
   391  000013                     conversorAD_config@neg:
   392                           	opt stack 0
   393  000013                     PWMtimer2_48MHzCLK_config@priority:
   394                           	opt stack 0
   395  000013                     PWMtimer0_48MHzCLK_config@priority:
   396                           	opt stack 0
   397  000013                     enviaSerial@c:
   398                           	opt stack 0
   399  000013                     PWMtimer2_B_pin@port:
   400                           	opt stack 0
   401  000013                     PWMtimer0_B_pin@port:
   402                           	opt stack 0
   403  000013                     ___wmul@multiplier:
   404                           	opt stack 0
   405  000013                     ___awdiv@dividend:
   406                           	opt stack 0
   407  000013                     ___lwdiv@dividend:
   408                           	opt stack 0
   409  000013                     ___aldiv@dividend:
   410                           	opt stack 0
   411                           
   412                           ; 4 bytes @ 0x12
   413  000013                     	ds	1
   414  000014                     conversorAD_config@chanel:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x13
   418  000014                     	ds	1
   419  000015                     ??_conversorAD_config:
   420  000015                     valor_AD@chanel:
   421                           	opt stack 0
   422  000015                     PWMtimer2_B_pin@tris:
   423                           	opt stack 0
   424  000015                     PWMtimer0_B_pin@tris:
   425                           	opt stack 0
   426  000015                     ___wmul@multiplicand:
   427                           	opt stack 0
   428  000015                     ___awdiv@divisor:
   429                           	opt stack 0
   430  000015                     ___lwdiv@divisor:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x14
   434  000015                     	ds	1
   435  000016                     valor_AD@ADvalor:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x15
   439  000016                     	ds	1
   440  000017                     PWMtimer2_B_pin@pino:
   441                           	opt stack 0
   442  000017                     PWMtimer0_B_pin@pino:
   443                           	opt stack 0
   444  000017                     ___awdiv@counter:
   445                           	opt stack 0
   446  000017                     ___lwdiv@counter:
   447                           	opt stack 0
   448  000017                     ___wmul@product:
   449                           	opt stack 0
   450  000017                     ___aldiv@divisor:
   451                           	opt stack 0
   452                           
   453                           ; 4 bytes @ 0x16
   454  000017                     	ds	1
   455  000018                     ___awdiv@sign:
   456                           	opt stack 0
   457  000018                     PWMtimer2_B_pin@tris_p:
   458                           	opt stack 0
   459  000018                     PWMtimer0_B_pin@tris_p:
   460                           	opt stack 0
   461  000018                     ___lwdiv@quotient:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x17
   465  000018                     	ds	1
   466  000019                     ___awdiv@quotient:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x18
   470  000019                     	ds	1
   471  00001A                     ?___lwmod:
   472                           	opt stack 0
   473  00001A                     PWMtimer2_B_pin@i:
   474                           	opt stack 0
   475  00001A                     PWMtimer0_B_pin@i:
   476                           	opt stack 0
   477  00001A                     ___lwmod@dividend:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x19
   481  00001A                     	ds	1
   482  00001B                     PWMtimer2_B_pin@mask:
   483                           	opt stack 0
   484  00001B                     PWMtimer0_B_pin@mask:
   485                           	opt stack 0
   486  00001B                     read_sensorns@threshold_value:
   487                           	opt stack 0
   488  00001B                     ___aldiv@counter:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x1A
   492  00001B                     	ds	1
   493  00001C                     ??_read_sensorns:
   494  00001C                     ___aldiv@sign:
   495                           	opt stack 0
   496  00001C                     ___lwmod@divisor:
   497                           	opt stack 0
   498  00001C                     calibrates_sensors@bar_sensorns:
   499                           	opt stack 0
   500                           
   501                           ; 16 bytes @ 0x1B
   502  00001C                     	ds	1
   503  00001D                     ___aldiv@quotient:
   504                           	opt stack 0
   505                           
   506                           ; 4 bytes @ 0x1C
   507  00001D                     	ds	1
   508  00001E                     ___lwmod@counter:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x1D
   512  00001E                     	ds	3
   513  000021                     ?_moving_avarege:
   514                           	opt stack 0
   515  000021                     moving_avarege@new_lavue:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x20
   519  000021                     	ds	2
   520  000023                     ??_moving_avarege:
   521                           
   522                           ; 0 bytes @ 0x22
   523  000023                     	ds	3
   524  000026                     read_sensorns@color_line:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x25
   528  000026                     	ds	1
   529  000027                     read_sensorns@var_assist:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x26
   533  000027                     	ds	2
   534  000029                     read_sensorns@num_over_limit_line:
   535                           	opt stack 0
   536  000029                     moving_avarege@sum:
   537                           	opt stack 0
   538                           
   539                           ; 4 bytes @ 0x28
   540  000029                     	ds	1
   541  00002A                     read_sensorns@third_portion:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x29
   545  00002A                     	ds	2
   546  00002C                     read_sensorns@index_over_limit:
   547                           	opt stack 0
   548  00002C                     calibrates_sensors@i:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x2B
   552  00002C                     	ds	1
   553  00002D                     read_sensorns@num_fired:
   554                           	opt stack 0
   555  00002D                     moving_avarege@i:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x2C
   559  00002D                     	ds	1
   560  00002E                     read_sensorns@valueAD:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x2D
   564  00002E                     	ds	2
   565  000030                     read_sensorns@max_index:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x2F
   569  000030                     	ds	1
   570  000031                     read_sensorns@i:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x30
   574  000031                     	ds	1
   575  000032                     tblptru	equ	0xFF8
   576                           tblptrh	equ	0xFF7
   577                           tblptrl	equ	0xFF6
   578                           tablat	equ	0xFF5
   579                           postinc0	equ	0xFEE
   580                           wreg	equ	0xFE8
   581                           postdec1	equ	0xFE5
   582                           fsr1l	equ	0xFE1
   583                           
   584                           ; 0 bytes @ 0x31
   585 ;;
   586 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   587 ;;
   588 ;; *************** function _main *****************
   589 ;; Defined at:
   590 ;;		line 30 in file "main.c"
   591 ;; Parameters:    Size  Location     Type
   592 ;;		None
   593 ;; Auto vars:     Size  Location     Type
   594 ;;  j               4   41[BANK0 ] unsigned long 
   595 ;;  valor           2   51[BANK0 ] unsigned int 
   596 ;;  filtered        2   49[BANK0 ] unsigned int 
   597 ;;  i               1    0        unsigned char 
   598 ;;  valorL          1    0        unsigned char 
   599 ;;  valorH          1    0        unsigned char 
   600 ;; Return value:  Size  Location     Type
   601 ;;		None               void
   602 ;; Registers used:
   603 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   604 ;; Tracked objects:
   605 ;;		On entry : 0/0
   606 ;;		On exit  : 0/0
   607 ;;		Unchanged: 0/0
   608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   609 ;;      Params:         0       0       0       0       0       0       0       0       0
   610 ;;      Locals:         0      12       0       0       0       0       0       0       0
   611 ;;      Temps:          0       0       0       0       0       0       0       0       0
   612 ;;      Totals:         0      12       0       0       0       0       0       0       0
   613 ;;Total ram usage:       12 bytes
   614 ;; Hardware stack levels required when called:    4
   615 ;; This function calls:
   616 ;;		_DonPimpolhoBoard_init
   617 ;;		___lwdiv
   618 ;;		___lwmod
   619 ;;		_calibrates_sensors
   620 ;;		_enviaSerial
   621 ;;		_moving_avarege
   622 ;;		_read_sensorns
   623 ;;		_return_distanceLine
   624 ;;		_serial_config
   625 ;; This function is called by:
   626 ;;		Startup code after reset
   627 ;; This function uses a non-reentrant model
   628 ;;
   629                           
   630                           	psect	text0
   631  00037E                     __ptext0:
   632                           	opt stack 0
   633  00037E                     _main:
   634                           	opt stack 27
   635                           
   636                           ;main.c: 32: unsigned int valor , filtered;
   637                           ;main.c: 33: char valorH, valorL, i;
   638                           ;main.c: 34: unsigned long int j;
   639                           ;main.c: 36: TRISD1 = 0;
   640                           
   641                           ;incstack = 0
   642  00037E  9295               	bcf	3989,1,c	;volatile
   643                           
   644                           ;main.c: 37: TRISD3 = 0;
   645  000380  9695               	bcf	3989,3,c	;volatile
   646                           
   647                           ;main.c: 39: TRISB0 = 0;
   648  000382  9093               	bcf	3987,0,c	;volatile
   649                           
   650                           ;main.c: 40: TRISC0 = 0;
   651  000384  9094               	bcf	3988,0,c	;volatile
   652                           
   653                           ;main.c: 42: RC0 = 0;
   654  000386  9082               	bcf	3970,0,c	;volatile
   655                           
   656                           ;main.c: 44: RD1 = 1;
   657  000388  8283               	bsf	3971,1,c	;volatile
   658                           
   659                           ;main.c: 45: RD3 = 1;
   660  00038A  8683               	bsf	3971,3,c	;volatile
   661                           
   662                           ;main.c: 47: RB0 = 0;
   663  00038C  9081               	bcf	3969,0,c	;volatile
   664                           
   665                           ;main.c: 49: DonPimpolhoBoard_init();
   666  00038E  ECDE  F005         	call	_DonPimpolhoBoard_init	;wreg free
   667                           
   668                           ;main.c: 51: serial_config();
   669  000392  EC29  F007         	call	_serial_config	;wreg free
   670                           
   671                           ;main.c: 57: TRISD5 = 1;
   672  000396  8A95               	bsf	3989,5,c	;volatile
   673  000398                     l2511:
   674                           
   675                           ;main.c: 61: calibrates_sensors();
   676  000398  EC07  F004         	call	_calibrates_sensors	;wreg free
   677                           
   678                           ;main.c: 63: if (RD5) {
   679  00039C  AA83               	btfss	3971,5,c	;volatile
   680  00039E  D7FC               	goto	l2511
   681                           
   682                           ;main.c: 68: RC0 = 1;
   683                           
   684                           ;main.c: 65: }
   685                           ;main.c: 66: }
   686                           
   687                           ;main.c: 64: break;
   688  0003A0  8082               	bsf	3970,0,c	;volatile
   689  0003A2                     l2517:
   690                           
   691                           ;main.c: 72: read_sensorns(BLACK,55);
   692  0003A2  0E37               	movlw	55
   693  0003A4  6E1B               	movwf	read_sensorns@threshold_value,c
   694  0003A6  0E01               	movlw	1
   695  0003A8  EC0D  F000         	call	_read_sensorns
   696                           
   697                           ;main.c: 74: valor = return_distanceLine();
   698  0003AC  EC3F  F007         	call	_return_distanceLine	;wreg free
   699  0003B0  C013  F0CF         	movff	?_return_distanceLine,main@valor
   700  0003B4  C014  F0D0         	movff	?_return_distanceLine+1,main@valor+1
   701                           
   702                           ;main.c: 76: filtered = moving_avarege(valor);
   703  0003B8  C0CF  F021         	movff	main@valor,moving_avarege@new_lavue
   704  0003BC  C0D0  F022         	movff	main@valor+1,moving_avarege@new_lavue+1
   705  0003C0  EC86  F003         	call	_moving_avarege	;wreg free
   706  0003C4  C021  F0CD         	movff	?_moving_avarege,main@filtered
   707  0003C8  C022  F0CE         	movff	?_moving_avarege+1,main@filtered+1
   708                           
   709                           ;main.c: 78: enviaSerial('V');
   710  0003CC  0E56               	movlw	86
   711  0003CE  EC39  F007         	call	_enviaSerial
   712                           
   713                           ;main.c: 79: enviaSerial((valor / 1000) + 48);
   714  0003D2  C0CF  F013         	movff	main@valor,___lwdiv@dividend
   715  0003D6  C0D0  F014         	movff	main@valor+1,___lwdiv@dividend+1
   716  0003DA  0E03               	movlw	3
   717  0003DC  6E16               	movwf	___lwdiv@divisor+1,c
   718  0003DE  0EE8               	movlw	232
   719  0003E0  6E15               	movwf	___lwdiv@divisor,c
   720  0003E2  EC09  F006         	call	___lwdiv	;wreg free
   721  0003E6  5013               	movf	?___lwdiv,w,c
   722  0003E8  0F30               	addlw	48
   723  0003EA  EC39  F007         	call	_enviaSerial
   724                           
   725                           ;main.c: 80: enviaSerial(((valor / 100) % 10) + 48);
   726  0003EE  0E00               	movlw	0
   727  0003F0  6E16               	movwf	___lwdiv@divisor+1,c
   728  0003F2  0E64               	movlw	100
   729  0003F4  6E15               	movwf	___lwdiv@divisor,c
   730  0003F6  C0CF  F013         	movff	main@valor,___lwdiv@dividend
   731  0003FA  C0D0  F014         	movff	main@valor+1,___lwdiv@dividend+1
   732  0003FE  EC09  F006         	call	___lwdiv	;wreg free
   733  000402  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
   734  000406  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
   735  00040A  0E00               	movlw	0
   736  00040C  6E1D               	movwf	___lwmod@divisor+1,c
   737  00040E  0E0A               	movlw	10
   738  000410  6E1C               	movwf	___lwmod@divisor,c
   739  000412  EC76  F006         	call	___lwmod	;wreg free
   740  000416  501A               	movf	?___lwmod,w,c
   741  000418  0F30               	addlw	48
   742  00041A  EC39  F007         	call	_enviaSerial
   743                           
   744                           ;main.c: 81: enviaSerial((valor % 100) / 10 + 48);
   745  00041E  0E00               	movlw	0
   746  000420  6E1D               	movwf	___lwmod@divisor+1,c
   747  000422  0E64               	movlw	100
   748  000424  6E1C               	movwf	___lwmod@divisor,c
   749  000426  C0CF  F01A         	movff	main@valor,___lwmod@dividend
   750  00042A  C0D0  F01B         	movff	main@valor+1,___lwmod@dividend+1
   751  00042E  EC76  F006         	call	___lwmod	;wreg free
   752  000432  C01A  F013         	movff	?___lwmod,___lwdiv@dividend
   753  000436  C01B  F014         	movff	?___lwmod+1,___lwdiv@dividend+1
   754  00043A  0E00               	movlw	0
   755  00043C  6E16               	movwf	___lwdiv@divisor+1,c
   756  00043E  0E0A               	movlw	10
   757  000440  6E15               	movwf	___lwdiv@divisor,c
   758  000442  EC09  F006         	call	___lwdiv	;wreg free
   759  000446  5013               	movf	?___lwdiv,w,c
   760  000448  0F30               	addlw	48
   761  00044A  EC39  F007         	call	_enviaSerial
   762                           
   763                           ;main.c: 82: enviaSerial((((valor % 1000) % 100) % 10) + 48);
   764  00044E  0E03               	movlw	3
   765  000450  6E1D               	movwf	___lwmod@divisor+1,c
   766  000452  0EE8               	movlw	232
   767  000454  6E1C               	movwf	___lwmod@divisor,c
   768  000456  C0CF  F01A         	movff	main@valor,___lwmod@dividend
   769  00045A  C0D0  F01B         	movff	main@valor+1,___lwmod@dividend+1
   770  00045E  EC76  F006         	call	___lwmod	;wreg free
   771  000462  C01A  F0C9         	movff	?___lwmod,_main$824
   772  000466  C01B  F0CA         	movff	?___lwmod+1,_main$824+1
   773                           
   774                           ;main.c: 82: enviaSerial((((valor % 1000) % 100) % 10) + 48);
   775  00046A  0E00               	movlw	0
   776  00046C  6E1D               	movwf	___lwmod@divisor+1,c
   777  00046E  0E64               	movlw	100
   778  000470  6E1C               	movwf	___lwmod@divisor,c
   779  000472  C0C9  F01A         	movff	_main$824,___lwmod@dividend
   780  000476  C0CA  F01B         	movff	_main$824+1,___lwmod@dividend+1
   781  00047A  EC76  F006         	call	___lwmod	;wreg free
   782  00047E  C01A  F0CB         	movff	?___lwmod,_main$825
   783  000482  C01B  F0CC         	movff	?___lwmod+1,_main$825+1
   784                           
   785                           ;main.c: 82: enviaSerial((((valor % 1000) % 100) % 10) + 48);
   786  000486  C0CB  F01A         	movff	_main$825,___lwmod@dividend
   787  00048A  C0CC  F01B         	movff	_main$825+1,___lwmod@dividend+1
   788  00048E  0E00               	movlw	0
   789  000490  6E1D               	movwf	___lwmod@divisor+1,c
   790  000492  0E0A               	movlw	10
   791  000494  6E1C               	movwf	___lwmod@divisor,c
   792  000496  EC76  F006         	call	___lwmod	;wreg free
   793  00049A  501A               	movf	?___lwmod,w,c
   794  00049C  0F30               	addlw	48
   795  00049E  EC39  F007         	call	_enviaSerial
   796                           
   797                           ;main.c: 83: enviaSerial('F');
   798  0004A2  0E46               	movlw	70
   799  0004A4  EC39  F007         	call	_enviaSerial
   800                           
   801                           ;main.c: 84: enviaSerial((filtered / 1000) + 48);
   802  0004A8  C0CD  F013         	movff	main@filtered,___lwdiv@dividend
   803  0004AC  C0CE  F014         	movff	main@filtered+1,___lwdiv@dividend+1
   804  0004B0  0E03               	movlw	3
   805  0004B2  6E16               	movwf	___lwdiv@divisor+1,c
   806  0004B4  0EE8               	movlw	232
   807  0004B6  6E15               	movwf	___lwdiv@divisor,c
   808  0004B8  EC09  F006         	call	___lwdiv	;wreg free
   809  0004BC  5013               	movf	?___lwdiv,w,c
   810  0004BE  0F30               	addlw	48
   811  0004C0  EC39  F007         	call	_enviaSerial
   812                           
   813                           ;main.c: 85: enviaSerial(((filtered / 100) % 10) + 48);
   814  0004C4  0E00               	movlw	0
   815  0004C6  6E16               	movwf	___lwdiv@divisor+1,c
   816  0004C8  0E64               	movlw	100
   817  0004CA  6E15               	movwf	___lwdiv@divisor,c
   818  0004CC  C0CD  F013         	movff	main@filtered,___lwdiv@dividend
   819  0004D0  C0CE  F014         	movff	main@filtered+1,___lwdiv@dividend+1
   820  0004D4  EC09  F006         	call	___lwdiv	;wreg free
   821  0004D8  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
   822  0004DC  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
   823  0004E0  0E00               	movlw	0
   824  0004E2  6E1D               	movwf	___lwmod@divisor+1,c
   825  0004E4  0E0A               	movlw	10
   826  0004E6  6E1C               	movwf	___lwmod@divisor,c
   827  0004E8  EC76  F006         	call	___lwmod	;wreg free
   828  0004EC  501A               	movf	?___lwmod,w,c
   829  0004EE  0F30               	addlw	48
   830  0004F0  EC39  F007         	call	_enviaSerial
   831                           
   832                           ;main.c: 86: enviaSerial((filtered % 100) / 10 + 48);
   833  0004F4  0E00               	movlw	0
   834  0004F6  6E1D               	movwf	___lwmod@divisor+1,c
   835  0004F8  0E64               	movlw	100
   836  0004FA  6E1C               	movwf	___lwmod@divisor,c
   837  0004FC  C0CD  F01A         	movff	main@filtered,___lwmod@dividend
   838  000500  C0CE  F01B         	movff	main@filtered+1,___lwmod@dividend+1
   839  000504  EC76  F006         	call	___lwmod	;wreg free
   840  000508  C01A  F013         	movff	?___lwmod,___lwdiv@dividend
   841  00050C  C01B  F014         	movff	?___lwmod+1,___lwdiv@dividend+1
   842  000510  0E00               	movlw	0
   843  000512  6E16               	movwf	___lwdiv@divisor+1,c
   844  000514  0E0A               	movlw	10
   845  000516  6E15               	movwf	___lwdiv@divisor,c
   846  000518  EC09  F006         	call	___lwdiv	;wreg free
   847  00051C  5013               	movf	?___lwdiv,w,c
   848  00051E  0F30               	addlw	48
   849  000520  EC39  F007         	call	_enviaSerial
   850                           
   851                           ;main.c: 87: enviaSerial((((filtered % 1000) % 100) % 10) + 48);
   852  000524  0E03               	movlw	3
   853  000526  6E1D               	movwf	___lwmod@divisor+1,c
   854  000528  0EE8               	movlw	232
   855  00052A  6E1C               	movwf	___lwmod@divisor,c
   856  00052C  C0CD  F01A         	movff	main@filtered,___lwmod@dividend
   857  000530  C0CE  F01B         	movff	main@filtered+1,___lwmod@dividend+1
   858  000534  EC76  F006         	call	___lwmod	;wreg free
   859  000538  C01A  F0C9         	movff	?___lwmod,_main$824
   860  00053C  C01B  F0CA         	movff	?___lwmod+1,_main$824+1
   861                           
   862                           ;main.c: 87: enviaSerial((((filtered % 1000) % 100) % 10) + 48);
   863  000540  0E00               	movlw	0
   864  000542  6E1D               	movwf	___lwmod@divisor+1,c
   865  000544  0E64               	movlw	100
   866  000546  6E1C               	movwf	___lwmod@divisor,c
   867  000548  C0C9  F01A         	movff	_main$824,___lwmod@dividend
   868  00054C  C0CA  F01B         	movff	_main$824+1,___lwmod@dividend+1
   869  000550  EC76  F006         	call	___lwmod	;wreg free
   870  000554  C01A  F0CB         	movff	?___lwmod,_main$825
   871  000558  C01B  F0CC         	movff	?___lwmod+1,_main$825+1
   872                           
   873                           ;main.c: 87: enviaSerial((((filtered % 1000) % 100) % 10) + 48);
   874  00055C  C0CB  F01A         	movff	_main$825,___lwmod@dividend
   875  000560  C0CC  F01B         	movff	_main$825+1,___lwmod@dividend+1
   876  000564  0E00               	movlw	0
   877  000566  6E1D               	movwf	___lwmod@divisor+1,c
   878  000568  0E0A               	movlw	10
   879  00056A  6E1C               	movwf	___lwmod@divisor,c
   880  00056C  EC76  F006         	call	___lwmod	;wreg free
   881  000570  501A               	movf	?___lwmod,w,c
   882  000572  0F30               	addlw	48
   883  000574  EC39  F007         	call	_enviaSerial
   884                           
   885                           ;main.c: 91: for (j = 0; j < 10000; j++);
   886  000578  0E00               	movlw	0
   887  00057A  0100               	movlb	0	; () banked
   888  00057C  6FC5               	movwf	main@j& (0+255),b
   889  00057E  0E00               	movlw	0
   890  000580  6FC6               	movwf	(main@j+1)& (0+255),b
   891  000582  0E00               	movlw	0
   892  000584  6FC7               	movwf	(main@j+2)& (0+255),b
   893  000586  0E00               	movlw	0
   894  000588  6FC8               	movwf	(main@j+3)& (0+255),b
   895                           
   896                           ; BSR set to: 0
   897  00058A  0100               	movlb	0	; () banked
   898  00058C  51C8               	movf	(main@j+3)& (0+255),w,b
   899  00058E  0100               	movlb	0	; () banked
   900  000590  11C7               	iorwf	(main@j+2)& (0+255),w,b
   901  000592  E109               	bnz	u1810
   902  000594  0E10               	movlw	16
   903  000596  0100               	movlb	0	; () banked
   904  000598  5DC5               	subwf	main@j& (0+255),w,b
   905  00059A  0E27               	movlw	39
   906  00059C  0100               	movlb	0	; () banked
   907  00059E  59C6               	subwfb	(main@j+1)& (0+255),w,b
   908  0005A0  B0D8               	btfsc	status,0,c
   909  0005A2  D6FF               	goto	l2517
   910  0005A4  D001               	goto	l2557
   911  0005A6                     u1810:
   912                           
   913                           ; BSR set to: 0
   914  0005A6  D6FD               	goto	l2517
   915  0005A8                     l2557:
   916                           
   917                           ; BSR set to: 0
   918  0005A8  0E01               	movlw	1
   919  0005AA  0100               	movlb	0	; () banked
   920  0005AC  27C5               	addwf	main@j& (0+255),f,b
   921  0005AE  0E00               	movlw	0
   922  0005B0  23C6               	addwfc	(main@j+1)& (0+255),f,b
   923  0005B2  23C7               	addwfc	(main@j+2)& (0+255),f,b
   924  0005B4  23C8               	addwfc	(main@j+3)& (0+255),f,b
   925  0005B6  0100               	movlb	0	; () banked
   926  0005B8  51C8               	movf	(main@j+3)& (0+255),w,b
   927  0005BA  0100               	movlb	0	; () banked
   928  0005BC  11C7               	iorwf	(main@j+2)& (0+255),w,b
   929  0005BE  E101               	bnz	u1820
   930  0005C0  D7E9               	goto	L1
   931  0005C2                     u1820:
   932                           
   933                           ; BSR set to: 0
   934                           ;main.c: 93: }
   935  0005C2  D6EF               	goto	l2517
   936  0005C4                     __end_of_main:
   937                           	opt stack 0
   938                           tblptru	equ	0xFF8
   939                           tblptrh	equ	0xFF7
   940                           tblptrl	equ	0xFF6
   941                           tablat	equ	0xFF5
   942                           postinc0	equ	0xFEE
   943                           wreg	equ	0xFE8
   944                           postdec1	equ	0xFE5
   945                           fsr1l	equ	0xFE1
   946                           status	equ	0xFD8
   947                           
   948 ;; *************** function _serial_config *****************
   949 ;; Defined at:
   950 ;;		line 11 in file "serial.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;		None
   953 ;; Auto vars:     Size  Location     Type
   954 ;;		None
   955 ;; Return value:  Size  Location     Type
   956 ;;		None               void
   957 ;; Registers used:
   958 ;;		wreg, status,2
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   964 ;;      Params:         0       0       0       0       0       0       0       0       0
   965 ;;      Locals:         0       0       0       0       0       0       0       0       0
   966 ;;      Temps:          0       0       0       0       0       0       0       0       0
   967 ;;      Totals:         0       0       0       0       0       0       0       0       0
   968 ;;Total ram usage:        0 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    2
   971 ;; This function calls:
   972 ;;		Nothing
   973 ;; This function is called by:
   974 ;;		_main
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           	psect	text1
   979  000E52                     __ptext1:
   980                           	opt stack 0
   981  000E52                     _serial_config:
   982                           	opt stack 28
   983                           
   984                           ;serial.c: 13: TXSTA = 0b00101100;
   985                           
   986                           ; BSR set to: 0
   987                           ;incstack = 0
   988  000E52  0E2C               	movlw	44
   989  000E54  6EAC               	movwf	4012,c	;volatile
   990                           
   991                           ;serial.c: 14: RCSTA = 0b10010000;
   992  000E56  0E90               	movlw	144
   993  000E58  6EAB               	movwf	4011,c	;volatile
   994                           
   995                           ;serial.c: 15: BAUDCON = 0b00001000;
   996  000E5A  0E08               	movlw	8
   997  000E5C  6EB8               	movwf	4024,c	;volatile
   998                           
   999                           ;serial.c: 16: SYNC = 0;
  1000  000E5E  98AC               	bcf	4012,4,c	;volatile
  1001                           
  1002                           ;serial.c: 17: BRGH = 1;
  1003  000E60  84AC               	bsf	4012,2,c	;volatile
  1004                           
  1005                           ;serial.c: 18: BRG16 = 1;
  1006  000E62  86B8               	bsf	4024,3,c	;volatile
  1007                           
  1008                           ;serial.c: 19: SPBRGH = 0b00000000;
  1009  000E64  0E00               	movlw	0
  1010  000E66  6EB0               	movwf	4016,c	;volatile
  1011                           
  1012                           ;serial.c: 20: SPBRG = 86;
  1013  000E68  0E56               	movlw	86
  1014  000E6A  6EAF               	movwf	4015,c	;volatile
  1015                           
  1016                           ;serial.c: 21: TRISC7 = 0;
  1017  000E6C  9E94               	bcf	3988,7,c	;volatile
  1018                           
  1019                           ;serial.c: 22: TRISC6 = 1;
  1020  000E6E  8C94               	bsf	3988,6,c	;volatile
  1021  000E70  0012               	return		;funcret
  1022  000E72                     __end_of_serial_config:
  1023                           	opt stack 0
  1024                           tblptru	equ	0xFF8
  1025                           tblptrh	equ	0xFF7
  1026                           tblptrl	equ	0xFF6
  1027                           tablat	equ	0xFF5
  1028                           postinc0	equ	0xFEE
  1029                           wreg	equ	0xFE8
  1030                           postdec1	equ	0xFE5
  1031                           fsr1l	equ	0xFE1
  1032                           status	equ	0xFD8
  1033                           
  1034 ;; *************** function _return_distanceLine *****************
  1035 ;; Defined at:
  1036 ;;		line 103 in file "ReflectanceSensors.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;		None
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  2   18[COMRAM] unsigned int 
  1043 ;; Registers used:
  1044 ;;		None
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1050 ;;      Params:         2       0       0       0       0       0       0       0       0
  1051 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1052 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1053 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1054 ;;Total ram usage:        2 bytes
  1055 ;; Hardware stack levels used:    1
  1056 ;; Hardware stack levels required when called:    2
  1057 ;; This function calls:
  1058 ;;		Nothing
  1059 ;; This function is called by:
  1060 ;;		_main
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           	psect	text2
  1065  000E7E                     __ptext2:
  1066                           	opt stack 0
  1067  000E7E                     _return_distanceLine:
  1068                           	opt stack 28
  1069                           
  1070                           ;ReflectanceSensors.c: 105: return distance_line;
  1071                           
  1072                           ;incstack = 0
  1073  000E7E  C09A  F013         	movff	_distance_line,?_return_distanceLine
  1074  000E82  C09B  F014         	movff	_distance_line+1,?_return_distanceLine+1
  1075  000E86  0012               	return		;funcret
  1076  000E88                     __end_of_return_distanceLine:
  1077                           	opt stack 0
  1078                           tblptru	equ	0xFF8
  1079                           tblptrh	equ	0xFF7
  1080                           tblptrl	equ	0xFF6
  1081                           tablat	equ	0xFF5
  1082                           postinc0	equ	0xFEE
  1083                           wreg	equ	0xFE8
  1084                           postdec1	equ	0xFE5
  1085                           fsr1l	equ	0xFE1
  1086                           status	equ	0xFD8
  1087                           
  1088 ;; *************** function _read_sensorns *****************
  1089 ;; Defined at:
  1090 ;;		line 58 in file "ReflectanceSensors.c"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;  color_line      1    wreg     enum E4440
  1093 ;;  threshold_va    1   26[COMRAM] unsigned char 
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;  color_line      1   37[COMRAM] enum E4440
  1096 ;;  valueAD         2   45[COMRAM] unsigned int 
  1097 ;;  third_portio    2   41[COMRAM] unsigned int 
  1098 ;;  var_assist      2   38[COMRAM] unsigned int 
  1099 ;;  i               1   48[COMRAM] unsigned char 
  1100 ;;  max_index       1   47[COMRAM] unsigned char 
  1101 ;;  num_fired       1   44[COMRAM] unsigned char 
  1102 ;;  index_over_l    1   43[COMRAM] unsigned char 
  1103 ;;  num_over_lim    1   40[COMRAM] unsigned char 
  1104 ;; Return value:  Size  Location     Type
  1105 ;;		None               void
  1106 ;; Registers used:
  1107 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1108 ;; Tracked objects:
  1109 ;;		On entry : 0/0
  1110 ;;		On exit  : 0/0
  1111 ;;		Unchanged: 0/0
  1112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1113 ;;      Params:         1       0       0       0       0       0       0       0       0
  1114 ;;      Locals:        12       0       0       0       0       0       0       0       0
  1115 ;;      Temps:         10       0       0       0       0       0       0       0       0
  1116 ;;      Totals:        23       0       0       0       0       0       0       0       0
  1117 ;;Total ram usage:       23 bytes
  1118 ;; Hardware stack levels used:    1
  1119 ;; Hardware stack levels required when called:    3
  1120 ;; This function calls:
  1121 ;;		___awdiv
  1122 ;;		___lwdiv
  1123 ;;		___wmul
  1124 ;;		_valor_AD
  1125 ;; This function is called by:
  1126 ;;		_main
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           	psect	text3
  1131  00001A                     __ptext3:
  1132                           	opt stack 0
  1133  00001A                     _read_sensorns:
  1134                           	opt stack 27
  1135                           
  1136                           ;incstack = 0
  1137                           ;read_sensorns@color_line stored from wreg
  1138  00001A  6E26               	movwf	read_sensorns@color_line,c
  1139                           
  1140                           ;ReflectanceSensors.c: 60: unsigned char i, max_index = 0, index_over_limit;
  1141  00001C  0E00               	movlw	0
  1142  00001E  6E30               	movwf	read_sensorns@max_index,c
  1143                           
  1144                           ;ReflectanceSensors.c: 61: unsigned int var_assist = 0, valueAD;
  1145  000020  0E00               	movlw	0
  1146  000022  6E28               	movwf	read_sensorns@var_assist+1,c
  1147  000024  0E00               	movlw	0
  1148  000026  6E27               	movwf	read_sensorns@var_assist,c
  1149                           
  1150                           ;ReflectanceSensors.c: 62: unsigned char num_fired = 0, num_over_limit_line = 0;
  1151  000028  0E00               	movlw	0
  1152  00002A  6E2D               	movwf	read_sensorns@num_fired,c
  1153  00002C  0E00               	movlw	0
  1154  00002E  6E29               	movwf	read_sensorns@num_over_limit_line,c
  1155                           
  1156                           ;ReflectanceSensors.c: 63: unsigned int third_portion;
  1157                           ;ReflectanceSensors.c: 65: for (i = 0; i < 8; i++) {
  1158  000030  0E00               	movlw	0
  1159  000032  6E31               	movwf	read_sensorns@i,c
  1160  000034                     l2405:
  1161  000034  0E07               	movlw	7
  1162  000036  6431               	cpfsgt	read_sensorns@i,c
  1163  000038  D001               	goto	l2409
  1164  00003A  D0C6               	goto	l2441
  1165  00003C                     l2409:
  1166                           
  1167                           ;ReflectanceSensors.c: 66: valueAD = valor_AD(i);
  1168  00003C  5031               	movf	read_sensorns@i,w,c
  1169  00003E  EC32  F006         	call	_valor_AD
  1170  000042  C013  F02E         	movff	?_valor_AD,read_sensorns@valueAD
  1171  000046  C014  F02F         	movff	?_valor_AD+1,read_sensorns@valueAD+1
  1172                           
  1173                           ;ReflectanceSensors.c: 67: if (valueAD > MAX_sensorns[i]) valueAD = MAX_sensorns[i];
  1174  00004A  5031               	movf	read_sensorns@i,w,c
  1175  00004C  0D02               	mullw	2
  1176  00004E  0E7E               	movlw	low _MAX_sensorns
  1177  000050  24F3               	addwf	prodl,w,c
  1178  000052  6ED9               	movwf	fsr2l,c
  1179  000054  0E00               	movlw	high _MAX_sensorns
  1180  000056  20F4               	addwfc	prodh,w,c
  1181  000058  6EDA               	movwf	fsr2h,c
  1182  00005A  502E               	movf	read_sensorns@valueAD,w,c
  1183  00005C  5CDE               	subwf	postinc2,w,c
  1184  00005E  502F               	movf	read_sensorns@valueAD+1,w,c
  1185  000060  58DE               	subwfb	postinc2,w,c
  1186  000062  B0D8               	btfsc	status,0,c
  1187  000064  D00C               	goto	l294
  1188  000066  5031               	movf	read_sensorns@i,w,c
  1189  000068  0D02               	mullw	2
  1190  00006A  0E7E               	movlw	low _MAX_sensorns
  1191  00006C  24F3               	addwf	prodl,w,c
  1192  00006E  6ED9               	movwf	fsr2l,c
  1193  000070  0E00               	movlw	high _MAX_sensorns
  1194  000072  20F4               	addwfc	prodh,w,c
  1195  000074  6EDA               	movwf	fsr2h,c
  1196  000076  CFDE F02E          	movff	postinc2,read_sensorns@valueAD
  1197  00007A  CFDD F02F          	movff	postdec2,read_sensorns@valueAD+1
  1198  00007E                     l294:
  1199                           
  1200                           ;ReflectanceSensors.c: 68: if (valueAD < MIN_sensorns[i]) valueAD = MIN_sensorns[i];
  1201  00007E  5031               	movf	read_sensorns@i,w,c
  1202  000080  0D02               	mullw	2
  1203  000082  0ED1               	movlw	low _MIN_sensorns
  1204  000084  24F3               	addwf	prodl,w,c
  1205  000086  6ED9               	movwf	fsr2l,c
  1206  000088  0E00               	movlw	high _MIN_sensorns
  1207  00008A  20F4               	addwfc	prodh,w,c
  1208  00008C  6EDA               	movwf	fsr2h,c
  1209  00008E  50DE               	movf	postinc2,w,c
  1210  000090  5C2E               	subwf	read_sensorns@valueAD,w,c
  1211  000092  50DE               	movf	postinc2,w,c
  1212  000094  582F               	subwfb	read_sensorns@valueAD+1,w,c
  1213  000096  B0D8               	btfsc	status,0,c
  1214  000098  D00C               	goto	l2417
  1215  00009A  5031               	movf	read_sensorns@i,w,c
  1216  00009C  0D02               	mullw	2
  1217  00009E  0ED1               	movlw	low _MIN_sensorns
  1218  0000A0  24F3               	addwf	prodl,w,c
  1219  0000A2  6ED9               	movwf	fsr2l,c
  1220  0000A4  0E00               	movlw	high _MIN_sensorns
  1221  0000A6  20F4               	addwfc	prodh,w,c
  1222  0000A8  6EDA               	movwf	fsr2h,c
  1223  0000AA  CFDE F02E          	movff	postinc2,read_sensorns@valueAD
  1224  0000AE  CFDD F02F          	movff	postdec2,read_sensorns@valueAD+1
  1225  0000B2                     l2417:
  1226                           
  1227                           ;ReflectanceSensors.c: 70: var_assist = 64 * (valueAD - MIN_sensorns[i]) / (MAX_sensorns
      +                          [i] - MIN_sensorns[i]);
  1228  0000B2  5031               	movf	read_sensorns@i,w,c
  1229  0000B4  0D02               	mullw	2
  1230  0000B6  0ED1               	movlw	low _MIN_sensorns
  1231  0000B8  24F3               	addwf	prodl,w,c
  1232  0000BA  6ED9               	movwf	fsr2l,c
  1233  0000BC  0E00               	movlw	high _MIN_sensorns
  1234  0000BE  20F4               	addwfc	prodh,w,c
  1235  0000C0  6EDA               	movwf	fsr2h,c
  1236  0000C2  CFDE F01C          	movff	postinc2,??_read_sensorns
  1237  0000C6  CFDD F01D          	movff	postdec2,??_read_sensorns+1
  1238  0000CA  1E1C               	comf	??_read_sensorns,f,c
  1239  0000CC  1E1D               	comf	??_read_sensorns+1,f,c
  1240  0000CE  4A1C               	infsnz	??_read_sensorns,f,c
  1241  0000D0  2A1D               	incf	??_read_sensorns+1,f,c
  1242  0000D2  502E               	movf	read_sensorns@valueAD,w,c
  1243  0000D4  261C               	addwf	??_read_sensorns,f,c
  1244  0000D6  502F               	movf	read_sensorns@valueAD+1,w,c
  1245  0000D8  221D               	addwfc	??_read_sensorns+1,f,c
  1246  0000DA  0E06               	movlw	6
  1247  0000DC                     u1645:
  1248  0000DC  90D8               	bcf	status,0,c
  1249  0000DE  361C               	rlcf	??_read_sensorns,f,c
  1250  0000E0  361D               	rlcf	??_read_sensorns+1,f,c
  1251  0000E2  2EE8               	decfsz	wreg,f,c
  1252  0000E4  D7FB               	goto	u1645
  1253  0000E6  C01C  F013         	movff	??_read_sensorns,___lwdiv@dividend
  1254  0000EA  C01D  F014         	movff	??_read_sensorns+1,___lwdiv@dividend+1
  1255  0000EE  5031               	movf	read_sensorns@i,w,c
  1256  0000F0  0D02               	mullw	2
  1257  0000F2  0E7E               	movlw	low _MAX_sensorns
  1258  0000F4  24F3               	addwf	prodl,w,c
  1259  0000F6  6ED9               	movwf	fsr2l,c
  1260  0000F8  0E00               	movlw	high _MAX_sensorns
  1261  0000FA  20F4               	addwfc	prodh,w,c
  1262  0000FC  6EDA               	movwf	fsr2h,c
  1263  0000FE  CFDE F01E          	movff	postinc2,??_read_sensorns+2
  1264  000102  CFDD F01F          	movff	postdec2,??_read_sensorns+3
  1265  000106  5031               	movf	read_sensorns@i,w,c
  1266  000108  0D02               	mullw	2
  1267  00010A  0ED1               	movlw	low _MIN_sensorns
  1268  00010C  24F3               	addwf	prodl,w,c
  1269  00010E  6ED9               	movwf	fsr2l,c
  1270  000110  0E00               	movlw	high _MIN_sensorns
  1271  000112  20F4               	addwfc	prodh,w,c
  1272  000114  6EDA               	movwf	fsr2h,c
  1273  000116  CFDE F020          	movff	postinc2,??_read_sensorns+4
  1274  00011A  CFDD F021          	movff	postdec2,??_read_sensorns+5
  1275  00011E  1E20               	comf	??_read_sensorns+4,f,c
  1276  000120  1E21               	comf	??_read_sensorns+5,f,c
  1277  000122  4A20               	infsnz	??_read_sensorns+4,f,c
  1278  000124  2A21               	incf	??_read_sensorns+5,f,c
  1279  000126  501E               	movf	??_read_sensorns+2,w,c
  1280  000128  2420               	addwf	??_read_sensorns+4,w,c
  1281  00012A  6E15               	movwf	___lwdiv@divisor,c
  1282  00012C  501F               	movf	??_read_sensorns+3,w,c
  1283  00012E  2021               	addwfc	??_read_sensorns+5,w,c
  1284  000130  6E16               	movwf	___lwdiv@divisor+1,c
  1285  000132  EC09  F006         	call	___lwdiv	;wreg free
  1286  000136  C013  F027         	movff	?___lwdiv,read_sensorns@var_assist
  1287  00013A  C014  F028         	movff	?___lwdiv+1,read_sensorns@var_assist+1
  1288                           
  1289                           ;ReflectanceSensors.c: 71: sensor_bar[i] = var_assist;
  1290  00013E  5031               	movf	read_sensorns@i,w,c
  1291  000140  0D01               	mullw	1
  1292  000142  0E8E               	movlw	low _sensor_bar
  1293  000144  24F3               	addwf	prodl,w,c
  1294  000146  6ED9               	movwf	fsr2l,c
  1295  000148  0E00               	movlw	high _sensor_bar
  1296  00014A  20F4               	addwfc	prodh,w,c
  1297  00014C  6EDA               	movwf	fsr2h,c
  1298  00014E  C027  FFDF         	movff	read_sensorns@var_assist,indf2
  1299                           
  1300                           ;ReflectanceSensors.c: 73: if (color_line == WHITE) {
  1301  000152  5026               	movf	read_sensorns@color_line,w,c
  1302  000154  A4D8               	btfss	status,2,c
  1303  000156  D014               	goto	l2425
  1304                           
  1305                           ;ReflectanceSensors.c: 74: sensor_bar[i] = 64 - sensor_bar[i];
  1306  000158  5031               	movf	read_sensorns@i,w,c
  1307  00015A  0D01               	mullw	1
  1308  00015C  0E8E               	movlw	low _sensor_bar
  1309  00015E  24F3               	addwf	prodl,w,c
  1310  000160  6ED9               	movwf	fsr2l,c
  1311  000162  0E00               	movlw	high _sensor_bar
  1312  000164  20F4               	addwfc	prodh,w,c
  1313  000166  6EDA               	movwf	fsr2h,c
  1314  000168  5031               	movf	read_sensorns@i,w,c
  1315  00016A  0D01               	mullw	1
  1316  00016C  0E8E               	movlw	low _sensor_bar
  1317  00016E  24F3               	addwf	prodl,w,c
  1318  000170  6EE1               	movwf	fsr1l,c
  1319  000172  0E00               	movlw	high _sensor_bar
  1320  000174  20F4               	addwfc	prodh,w,c
  1321  000176  6EE2               	movwf	fsr1h,c
  1322  000178  50E7               	movf	indf1,w,c
  1323  00017A  0800               	sublw	0
  1324  00017C  0F40               	addlw	64
  1325  00017E  6EDF               	movwf	indf2,c
  1326  000180                     l2425:
  1327                           
  1328                           ;ReflectanceSensors.c: 75: }
  1329                           ;ReflectanceSensors.c: 79: if (sensor_bar[i] > threshold_value) {
  1330  000180  5031               	movf	read_sensorns@i,w,c
  1331  000182  0D01               	mullw	1
  1332  000184  0E8E               	movlw	low _sensor_bar
  1333  000186  24F3               	addwf	prodl,w,c
  1334  000188  6ED9               	movwf	fsr2l,c
  1335  00018A  0E00               	movlw	high _sensor_bar
  1336  00018C  20F4               	addwfc	prodh,w,c
  1337  00018E  6EDA               	movwf	fsr2h,c
  1338  000190  50DE               	movf	postinc2,w,c
  1339  000192  5C1B               	subwf	read_sensorns@threshold_value,w,c
  1340  000194  B0D8               	btfsc	status,0,c
  1341  000196  D008               	goto	l2433
  1342                           
  1343                           ;ReflectanceSensors.c: 80: num_fired++;
  1344  000198  2A2D               	incf	read_sensorns@num_fired,f,c
  1345                           
  1346                           ;ReflectanceSensors.c: 81: if (max_index < i) {
  1347  00019A  5031               	movf	read_sensorns@i,w,c
  1348  00019C  5C30               	subwf	read_sensorns@max_index,w,c
  1349  00019E  B0D8               	btfsc	status,0,c
  1350  0001A0  D011               	goto	l299
  1351                           
  1352                           ;ReflectanceSensors.c: 82: max_index = i;
  1353  0001A2  C031  F030         	movff	read_sensorns@i,read_sensorns@max_index
  1354                           
  1355                           ;ReflectanceSensors.c: 83: }
  1356                           ;ReflectanceSensors.c: 84: } else if (sensor_bar[i] > 20) {
  1357  0001A6  D00E               	goto	l299
  1358  0001A8                     l2433:
  1359  0001A8  5031               	movf	read_sensorns@i,w,c
  1360  0001AA  0D01               	mullw	1
  1361  0001AC  0E8E               	movlw	low _sensor_bar
  1362  0001AE  24F3               	addwf	prodl,w,c
  1363  0001B0  6ED9               	movwf	fsr2l,c
  1364  0001B2  0E00               	movlw	high _sensor_bar
  1365  0001B4  20F4               	addwfc	prodh,w,c
  1366  0001B6  6EDA               	movwf	fsr2h,c
  1367  0001B8  0E14               	movlw	20
  1368  0001BA  64DF               	cpfsgt	indf2,c
  1369  0001BC  D003               	goto	l299
  1370                           
  1371                           ;ReflectanceSensors.c: 85: num_over_limit_line++;
  1372  0001BE  2A29               	incf	read_sensorns@num_over_limit_line,f,c
  1373                           
  1374                           ;ReflectanceSensors.c: 86: index_over_limit = i;
  1375  0001C0  C031  F02C         	movff	read_sensorns@i,read_sensorns@index_over_limit
  1376  0001C4                     l299:
  1377  0001C4  2A31               	incf	read_sensorns@i,f,c
  1378  0001C6  D736               	goto	l2405
  1379  0001C8                     l2441:
  1380                           
  1381                           ;ReflectanceSensors.c: 87: }
  1382                           ;ReflectanceSensors.c: 89: }
  1383                           ;ReflectanceSensors.c: 90: third_portion = 27 - (27 * sensor_bar[index_over_limit]) / 64
      +                          ;
  1384  0001C8  502C               	movf	read_sensorns@index_over_limit,w,c
  1385  0001CA  0D01               	mullw	1
  1386  0001CC  0E8E               	movlw	low _sensor_bar
  1387  0001CE  24F3               	addwf	prodl,w,c
  1388  0001D0  6ED9               	movwf	fsr2l,c
  1389  0001D2  0E00               	movlw	high _sensor_bar
  1390  0001D4  20F4               	addwfc	prodh,w,c
  1391  0001D6  6EDA               	movwf	fsr2h,c
  1392  0001D8  50DF               	movf	indf2,w,c
  1393  0001DA  6E1C               	movwf	??_read_sensorns& (0+255),c
  1394  0001DC  501C               	movf	??_read_sensorns,w,c
  1395  0001DE  0D1B               	mullw	27
  1396  0001E0  CFF3 F013          	movff	prodl,___awdiv@dividend
  1397  0001E4  CFF4 F014          	movff	prodh,___awdiv@dividend+1
  1398  0001E8  0E00               	movlw	0
  1399  0001EA  6E16               	movwf	___awdiv@divisor+1,c
  1400  0001EC  0E40               	movlw	64
  1401  0001EE  6E15               	movwf	___awdiv@divisor,c
  1402  0001F0  EC2F  F005         	call	___awdiv	;wreg free
  1403  0001F4  1E13               	comf	?___awdiv,f,c
  1404  0001F6  1E14               	comf	?___awdiv+1,f,c
  1405  0001F8  4A13               	infsnz	?___awdiv,f,c
  1406  0001FA  2A14               	incf	?___awdiv+1,f,c
  1407  0001FC  0E1B               	movlw	27
  1408  0001FE  2413               	addwf	?___awdiv,w,c
  1409  000200  6E2A               	movwf	read_sensorns@third_portion,c
  1410  000202  0E00               	movlw	0
  1411  000204  2014               	addwfc	?___awdiv+1,w,c
  1412  000206  6E2B               	movwf	read_sensorns@third_portion+1,c
  1413                           
  1414                           ;ReflectanceSensors.c: 92: if (num_over_limit_line) {
  1415  000208  5029               	movf	read_sensorns@num_over_limit_line,w,c
  1416  00020A  B4D8               	btfsc	status,2,c
  1417  00020C  D084               	goto	l2451
  1418                           
  1419                           ;ReflectanceSensors.c: 93: if (max_index > index_over_limit) {
  1420  00020E  5030               	movf	read_sensorns@max_index,w,c
  1421  000210  5C2C               	subwf	read_sensorns@index_over_limit,w,c
  1422  000212  B0D8               	btfsc	status,0,c
  1423  000214  D044               	goto	l2449
  1424                           
  1425                           ;ReflectanceSensors.c: 94: distance_line = 580/(8-1) * (7 - max_index) + second_portion[
      +                          num_fired - 1] + 580/(8-1)/2 - third_portion;
  1426  000216  0EFE               	movlw	254
  1427  000218  6E1C               	movwf	??_read_sensorns& (0+255),c
  1428  00021A  0EFF               	movlw	255
  1429  00021C  6E1D               	movwf	(??_read_sensorns+1)& (0+255),c
  1430  00021E  502D               	movf	read_sensorns@num_fired,w,c
  1431  000220  6E1E               	movwf	(??_read_sensorns+2)& (0+255),c
  1432  000222  6A1F               	clrf	(??_read_sensorns+3)& (0+255),c
  1433  000224  90D8               	bcf	status,0,c
  1434  000226  361E               	rlcf	??_read_sensorns+2,f,c
  1435  000228  361F               	rlcf	??_read_sensorns+3,f,c
  1436  00022A  501C               	movf	??_read_sensorns,w,c
  1437  00022C  261E               	addwf	??_read_sensorns+2,f,c
  1438  00022E  501D               	movf	??_read_sensorns+1,w,c
  1439  000230  221F               	addwfc	??_read_sensorns+3,f,c
  1440  000232  0EE1               	movlw	low _second_portion
  1441  000234  241E               	addwf	??_read_sensorns+2,w,c
  1442  000236  6ED9               	movwf	fsr2l,c
  1443  000238  0E00               	movlw	high _second_portion
  1444  00023A  201F               	addwfc	??_read_sensorns+3,w,c
  1445  00023C  6EDA               	movwf	fsr2h,c
  1446  00023E  CFDE F020          	movff	postinc2,??_read_sensorns+4
  1447  000242  CFDD F021          	movff	postdec2,??_read_sensorns+5
  1448  000246  C02A  F022         	movff	read_sensorns@third_portion,??_read_sensorns+6
  1449  00024A  C02B  F023         	movff	read_sensorns@third_portion+1,??_read_sensorns+7
  1450  00024E  1E22               	comf	??_read_sensorns+6,f,c
  1451  000250  1E23               	comf	??_read_sensorns+7,f,c
  1452  000252  4A22               	infsnz	??_read_sensorns+6,f,c
  1453  000254  2A23               	incf	??_read_sensorns+7,f,c
  1454  000256  5030               	movf	read_sensorns@max_index,w,c
  1455  000258  6E24               	movwf	(??_read_sensorns+8)& (0+255),c
  1456  00025A  6A25               	clrf	(??_read_sensorns+9)& (0+255),c
  1457  00025C  1E24               	comf	??_read_sensorns+8,f,c
  1458  00025E  1E25               	comf	??_read_sensorns+9,f,c
  1459  000260  4A24               	infsnz	??_read_sensorns+8,f,c
  1460  000262  2A25               	incf	??_read_sensorns+9,f,c
  1461  000264  0E07               	movlw	7
  1462  000266  2424               	addwf	??_read_sensorns+8,w,c
  1463  000268  6E13               	movwf	___wmul@multiplier,c
  1464  00026A  0E00               	movlw	0
  1465  00026C  2025               	addwfc	??_read_sensorns+9,w,c
  1466  00026E  6E14               	movwf	___wmul@multiplier+1,c
  1467  000270  0E00               	movlw	0
  1468  000272  6E16               	movwf	___wmul@multiplicand+1,c
  1469  000274  0E52               	movlw	82
  1470  000276  6E15               	movwf	___wmul@multiplicand,c
  1471  000278  EC03  F007         	call	___wmul	;wreg free
  1472  00027C  5022               	movf	??_read_sensorns+6,w,c
  1473  00027E  2613               	addwf	?___wmul,f,c
  1474  000280  5023               	movf	??_read_sensorns+7,w,c
  1475  000282  2214               	addwfc	?___wmul+1,f,c
  1476  000284  5020               	movf	??_read_sensorns+4,w,c
  1477  000286  2613               	addwf	?___wmul,f,c
  1478  000288  5021               	movf	??_read_sensorns+5,w,c
  1479  00028A  2214               	addwfc	?___wmul+1,f,c
  1480  00028C  0E29               	movlw	41
  1481  00028E  2413               	addwf	?___wmul,w,c
  1482  000290  0100               	movlb	0	; () banked
  1483  000292  6F9A               	movwf	_distance_line& (0+255),b
  1484  000294  0E00               	movlw	0
  1485  000296  2014               	addwfc	?___wmul+1,w,c
  1486  000298  0100               	movlb	0	; () banked
  1487  00029A  6F9B               	movwf	(_distance_line+1)& (0+255),b
  1488                           
  1489                           ;ReflectanceSensors.c: 95: } else {
  1490  00029C  0012               	return	
  1491  00029E                     l2449:
  1492                           
  1493                           ;ReflectanceSensors.c: 96: distance_line = 580/(8-1) * (7 - max_index) + second_portion[
      +                          num_fired - 1] - 580/(8-1)/2 + third_portion;
  1494  00029E  0EFE               	movlw	254
  1495  0002A0  6E1C               	movwf	??_read_sensorns& (0+255),c
  1496  0002A2  0EFF               	movlw	255
  1497  0002A4  6E1D               	movwf	(??_read_sensorns+1)& (0+255),c
  1498  0002A6  502D               	movf	read_sensorns@num_fired,w,c
  1499  0002A8  6E1E               	movwf	(??_read_sensorns+2)& (0+255),c
  1500  0002AA  6A1F               	clrf	(??_read_sensorns+3)& (0+255),c
  1501  0002AC  90D8               	bcf	status,0,c
  1502  0002AE  361E               	rlcf	??_read_sensorns+2,f,c
  1503  0002B0  361F               	rlcf	??_read_sensorns+3,f,c
  1504  0002B2  501C               	movf	??_read_sensorns,w,c
  1505  0002B4  261E               	addwf	??_read_sensorns+2,f,c
  1506  0002B6  501D               	movf	??_read_sensorns+1,w,c
  1507  0002B8  221F               	addwfc	??_read_sensorns+3,f,c
  1508  0002BA  0EE1               	movlw	low _second_portion
  1509  0002BC  241E               	addwf	??_read_sensorns+2,w,c
  1510  0002BE  6ED9               	movwf	fsr2l,c
  1511  0002C0  0E00               	movlw	high _second_portion
  1512  0002C2  201F               	addwfc	??_read_sensorns+3,w,c
  1513  0002C4  6EDA               	movwf	fsr2h,c
  1514  0002C6  CFDE F020          	movff	postinc2,??_read_sensorns+4
  1515  0002CA  CFDD F021          	movff	postdec2,??_read_sensorns+5
  1516  0002CE  5030               	movf	read_sensorns@max_index,w,c
  1517  0002D0  6E22               	movwf	(??_read_sensorns+6)& (0+255),c
  1518  0002D2  6A23               	clrf	(??_read_sensorns+7)& (0+255),c
  1519  0002D4  1E22               	comf	??_read_sensorns+6,f,c
  1520  0002D6  1E23               	comf	??_read_sensorns+7,f,c
  1521  0002D8  4A22               	infsnz	??_read_sensorns+6,f,c
  1522  0002DA  2A23               	incf	??_read_sensorns+7,f,c
  1523  0002DC  0E07               	movlw	7
  1524  0002DE  2422               	addwf	??_read_sensorns+6,w,c
  1525  0002E0  6E13               	movwf	___wmul@multiplier,c
  1526  0002E2  0E00               	movlw	0
  1527  0002E4  2023               	addwfc	??_read_sensorns+7,w,c
  1528  0002E6  6E14               	movwf	___wmul@multiplier+1,c
  1529  0002E8  0E00               	movlw	0
  1530  0002EA  6E16               	movwf	___wmul@multiplicand+1,c
  1531  0002EC  0E52               	movlw	82
  1532  0002EE  6E15               	movwf	___wmul@multiplicand,c
  1533  0002F0  EC03  F007         	call	___wmul	;wreg free
  1534  0002F4  5020               	movf	??_read_sensorns+4,w,c
  1535  0002F6  2613               	addwf	?___wmul,f,c
  1536  0002F8  5021               	movf	??_read_sensorns+5,w,c
  1537  0002FA  2214               	addwfc	?___wmul+1,f,c
  1538  0002FC  502A               	movf	read_sensorns@third_portion,w,c
  1539  0002FE  2613               	addwf	?___wmul,f,c
  1540  000300  502B               	movf	read_sensorns@third_portion+1,w,c
  1541  000302  2214               	addwfc	?___wmul+1,f,c
  1542  000304  0ED7               	movlw	215
  1543  000306  2413               	addwf	?___wmul,w,c
  1544  000308  0100               	movlb	0	; () banked
  1545  00030A  6F9A               	movwf	_distance_line& (0+255),b
  1546  00030C  0EFF               	movlw	255
  1547  00030E  2014               	addwfc	?___wmul+1,w,c
  1548  000310  0100               	movlb	0	; () banked
  1549  000312  6F9B               	movwf	(_distance_line+1)& (0+255),b
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;ReflectanceSensors.c: 97: }
  1553                           ;ReflectanceSensors.c: 98: } else {
  1554  000314  0012               	return	
  1555  000316                     l2451:
  1556                           
  1557                           ;ReflectanceSensors.c: 99: distance_line = 580/(8-1) * (7 - max_index) + second_portion[
      +                          num_fired - 1];
  1558  000316  0EFE               	movlw	254
  1559  000318  6E1C               	movwf	??_read_sensorns& (0+255),c
  1560  00031A  0EFF               	movlw	255
  1561  00031C  6E1D               	movwf	(??_read_sensorns+1)& (0+255),c
  1562  00031E  502D               	movf	read_sensorns@num_fired,w,c
  1563  000320  6E1E               	movwf	(??_read_sensorns+2)& (0+255),c
  1564  000322  6A1F               	clrf	(??_read_sensorns+3)& (0+255),c
  1565  000324  90D8               	bcf	status,0,c
  1566  000326  361E               	rlcf	??_read_sensorns+2,f,c
  1567  000328  361F               	rlcf	??_read_sensorns+3,f,c
  1568  00032A  501C               	movf	??_read_sensorns,w,c
  1569  00032C  261E               	addwf	??_read_sensorns+2,f,c
  1570  00032E  501D               	movf	??_read_sensorns+1,w,c
  1571  000330  221F               	addwfc	??_read_sensorns+3,f,c
  1572  000332  0EE1               	movlw	low _second_portion
  1573  000334  241E               	addwf	??_read_sensorns+2,w,c
  1574  000336  6ED9               	movwf	fsr2l,c
  1575  000338  0E00               	movlw	high _second_portion
  1576  00033A  201F               	addwfc	??_read_sensorns+3,w,c
  1577  00033C  6EDA               	movwf	fsr2h,c
  1578  00033E  CFDE F020          	movff	postinc2,??_read_sensorns+4
  1579  000342  CFDD F021          	movff	postdec2,??_read_sensorns+5
  1580  000346  5030               	movf	read_sensorns@max_index,w,c
  1581  000348  6E22               	movwf	(??_read_sensorns+6)& (0+255),c
  1582  00034A  6A23               	clrf	(??_read_sensorns+7)& (0+255),c
  1583  00034C  1E22               	comf	??_read_sensorns+6,f,c
  1584  00034E  1E23               	comf	??_read_sensorns+7,f,c
  1585  000350  4A22               	infsnz	??_read_sensorns+6,f,c
  1586  000352  2A23               	incf	??_read_sensorns+7,f,c
  1587  000354  0E07               	movlw	7
  1588  000356  2422               	addwf	??_read_sensorns+6,w,c
  1589  000358  6E13               	movwf	___wmul@multiplier,c
  1590  00035A  0E00               	movlw	0
  1591  00035C  2023               	addwfc	??_read_sensorns+7,w,c
  1592  00035E  6E14               	movwf	___wmul@multiplier+1,c
  1593  000360  0E00               	movlw	0
  1594  000362  6E16               	movwf	___wmul@multiplicand+1,c
  1595  000364  0E52               	movlw	82
  1596  000366  6E15               	movwf	___wmul@multiplicand,c
  1597  000368  EC03  F007         	call	___wmul	;wreg free
  1598  00036C  5020               	movf	??_read_sensorns+4,w,c
  1599  00036E  2413               	addwf	?___wmul,w,c
  1600  000370  0100               	movlb	0	; () banked
  1601  000372  6F9A               	movwf	_distance_line& (0+255),b
  1602  000374  5021               	movf	??_read_sensorns+5,w,c
  1603  000376  2014               	addwfc	?___wmul+1,w,c
  1604  000378  0100               	movlb	0	; () banked
  1605  00037A  6F9B               	movwf	(_distance_line+1)& (0+255),b
  1606  00037C  0012               	return	
  1607  00037E                     __end_of_read_sensorns:
  1608                           	opt stack 0
  1609                           tblptru	equ	0xFF8
  1610                           tblptrh	equ	0xFF7
  1611                           tblptrl	equ	0xFF6
  1612                           tablat	equ	0xFF5
  1613                           prodh	equ	0xFF4
  1614                           prodl	equ	0xFF3
  1615                           postinc0	equ	0xFEE
  1616                           wreg	equ	0xFE8
  1617                           indf1	equ	0xFE7
  1618                           postdec1	equ	0xFE5
  1619                           fsr1h	equ	0xFE2
  1620                           fsr1l	equ	0xFE1
  1621                           indf2	equ	0xFDF
  1622                           postinc2	equ	0xFDE
  1623                           postdec2	equ	0xFDD
  1624                           fsr2h	equ	0xFDA
  1625                           fsr2l	equ	0xFD9
  1626                           status	equ	0xFD8
  1627                           
  1628 ;; *************** function ___wmul *****************
  1629 ;; Defined at:
  1630 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;  multiplier      2   18[COMRAM] unsigned int 
  1633 ;;  multiplicand    2   20[COMRAM] unsigned int 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;  product         2   22[COMRAM] unsigned int 
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  2   18[COMRAM] unsigned int 
  1638 ;; Registers used:
  1639 ;;		wreg, status,2, status,0, prodl, prodh
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1645 ;;      Params:         4       0       0       0       0       0       0       0       0
  1646 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1647 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1648 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1649 ;;Total ram usage:        6 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; Hardware stack levels required when called:    2
  1652 ;; This function calls:
  1653 ;;		Nothing
  1654 ;; This function is called by:
  1655 ;;		_read_sensorns
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text4
  1660  000E06                     __ptext4:
  1661                           	opt stack 0
  1662  000E06                     ___wmul:
  1663                           	opt stack 27
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;incstack = 0
  1667  000E06  5013               	movf	___wmul@multiplier,w,c
  1668  000E08  0215               	mulwf	___wmul@multiplicand,c
  1669  000E0A  CFF3 F017          	movff	prodl,___wmul@product
  1670  000E0E  CFF4 F018          	movff	prodh,___wmul@product+1
  1671  000E12  5013               	movf	___wmul@multiplier,w,c
  1672  000E14  0216               	mulwf	___wmul@multiplicand+1,c
  1673  000E16  50F3               	movf	prodl,w,c
  1674  000E18  2618               	addwf	___wmul@product+1,f,c
  1675  000E1A  5014               	movf	___wmul@multiplier+1,w,c
  1676  000E1C  0215               	mulwf	___wmul@multiplicand,c
  1677  000E1E  50F3               	movf	prodl,w,c
  1678  000E20  2618               	addwf	___wmul@product+1,f,c
  1679  000E22  C017  F013         	movff	___wmul@product,?___wmul
  1680  000E26  C018  F014         	movff	___wmul@product+1,?___wmul+1
  1681  000E2A  0012               	return	
  1682  000E2C                     __end_of___wmul:
  1683                           	opt stack 0
  1684                           tblptru	equ	0xFF8
  1685                           tblptrh	equ	0xFF7
  1686                           tblptrl	equ	0xFF6
  1687                           tablat	equ	0xFF5
  1688                           prodh	equ	0xFF4
  1689                           prodl	equ	0xFF3
  1690                           postinc0	equ	0xFEE
  1691                           wreg	equ	0xFE8
  1692                           indf1	equ	0xFE7
  1693                           postdec1	equ	0xFE5
  1694                           fsr1h	equ	0xFE2
  1695                           fsr1l	equ	0xFE1
  1696                           indf2	equ	0xFDF
  1697                           postinc2	equ	0xFDE
  1698                           postdec2	equ	0xFDD
  1699                           fsr2h	equ	0xFDA
  1700                           fsr2l	equ	0xFD9
  1701                           status	equ	0xFD8
  1702                           
  1703 ;; *************** function ___lwdiv *****************
  1704 ;; Defined at:
  1705 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  dividend        2   18[COMRAM] unsigned int 
  1708 ;;  divisor         2   20[COMRAM] unsigned int 
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;  quotient        2   23[COMRAM] unsigned int 
  1711 ;;  counter         1   22[COMRAM] unsigned char 
  1712 ;; Return value:  Size  Location     Type
  1713 ;;                  2   18[COMRAM] unsigned int 
  1714 ;; Registers used:
  1715 ;;		wreg, status,2, status,0
  1716 ;; Tracked objects:
  1717 ;;		On entry : 0/0
  1718 ;;		On exit  : 0/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1721 ;;      Params:         4       0       0       0       0       0       0       0       0
  1722 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1723 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1724 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1725 ;;Total ram usage:        7 bytes
  1726 ;; Hardware stack levels used:    1
  1727 ;; Hardware stack levels required when called:    2
  1728 ;; This function calls:
  1729 ;;		Nothing
  1730 ;; This function is called by:
  1731 ;;		_main
  1732 ;;		_read_sensorns
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	text5
  1737  000C12                     __ptext5:
  1738                           	opt stack 0
  1739  000C12                     ___lwdiv:
  1740                           	opt stack 27
  1741                           
  1742                           ;incstack = 0
  1743  000C12  0E00               	movlw	0
  1744  000C14  6E19               	movwf	___lwdiv@quotient+1,c
  1745  000C16  0E00               	movlw	0
  1746  000C18  6E18               	movwf	___lwdiv@quotient,c
  1747  000C1A  5015               	movf	___lwdiv@divisor,w,c
  1748  000C1C  1016               	iorwf	___lwdiv@divisor+1,w,c
  1749  000C1E  B4D8               	btfsc	status,2,c
  1750  000C20  D01C               	goto	l766
  1751  000C22  0E01               	movlw	1
  1752  000C24  6E17               	movwf	___lwdiv@counter,c
  1753  000C26  D004               	goto	l2341
  1754  000C28                     l2339:
  1755  000C28  90D8               	bcf	status,0,c
  1756  000C2A  3615               	rlcf	___lwdiv@divisor,f,c
  1757  000C2C  3616               	rlcf	___lwdiv@divisor+1,f,c
  1758  000C2E  2A17               	incf	___lwdiv@counter,f,c
  1759  000C30                     l2341:
  1760  000C30  AE16               	btfss	___lwdiv@divisor+1,7,c
  1761  000C32  D7FA               	goto	l2339
  1762  000C34                     l2343:
  1763  000C34  90D8               	bcf	status,0,c
  1764  000C36  3618               	rlcf	___lwdiv@quotient,f,c
  1765  000C38  3619               	rlcf	___lwdiv@quotient+1,f,c
  1766  000C3A  5015               	movf	___lwdiv@divisor,w,c
  1767  000C3C  5C13               	subwf	___lwdiv@dividend,w,c
  1768  000C3E  5016               	movf	___lwdiv@divisor+1,w,c
  1769  000C40  5814               	subwfb	___lwdiv@dividend+1,w,c
  1770  000C42  A0D8               	btfss	status,0,c
  1771  000C44  D005               	goto	l2351
  1772  000C46  5015               	movf	___lwdiv@divisor,w,c
  1773  000C48  5E13               	subwf	___lwdiv@dividend,f,c
  1774  000C4A  5016               	movf	___lwdiv@divisor+1,w,c
  1775  000C4C  5A14               	subwfb	___lwdiv@dividend+1,f,c
  1776  000C4E  8018               	bsf	___lwdiv@quotient,0,c
  1777  000C50                     l2351:
  1778  000C50  90D8               	bcf	status,0,c
  1779  000C52  3216               	rrcf	___lwdiv@divisor+1,f,c
  1780  000C54  3215               	rrcf	___lwdiv@divisor,f,c
  1781  000C56  2E17               	decfsz	___lwdiv@counter,f,c
  1782  000C58  D7ED               	goto	l2343
  1783  000C5A                     l766:
  1784  000C5A  C018  F013         	movff	___lwdiv@quotient,?___lwdiv
  1785  000C5E  C019  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1786  000C62  0012               	return		;funcret
  1787  000C64                     __end_of___lwdiv:
  1788                           	opt stack 0
  1789                           tblptru	equ	0xFF8
  1790                           tblptrh	equ	0xFF7
  1791                           tblptrl	equ	0xFF6
  1792                           tablat	equ	0xFF5
  1793                           prodh	equ	0xFF4
  1794                           prodl	equ	0xFF3
  1795                           postinc0	equ	0xFEE
  1796                           wreg	equ	0xFE8
  1797                           indf1	equ	0xFE7
  1798                           postdec1	equ	0xFE5
  1799                           fsr1h	equ	0xFE2
  1800                           fsr1l	equ	0xFE1
  1801                           indf2	equ	0xFDF
  1802                           postinc2	equ	0xFDE
  1803                           postdec2	equ	0xFDD
  1804                           fsr2h	equ	0xFDA
  1805                           fsr2l	equ	0xFD9
  1806                           status	equ	0xFD8
  1807                           
  1808 ;; *************** function ___awdiv *****************
  1809 ;; Defined at:
  1810 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;  dividend        2   18[COMRAM] int 
  1813 ;;  divisor         2   20[COMRAM] int 
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  quotient        2   24[COMRAM] int 
  1816 ;;  sign            1   23[COMRAM] unsigned char 
  1817 ;;  counter         1   22[COMRAM] unsigned char 
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  2   18[COMRAM] int 
  1820 ;; Registers used:
  1821 ;;		wreg, status,2, status,0
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1827 ;;      Params:         4       0       0       0       0       0       0       0       0
  1828 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1829 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1830 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1831 ;;Total ram usage:        8 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    2
  1834 ;; This function calls:
  1835 ;;		Nothing
  1836 ;; This function is called by:
  1837 ;;		_read_sensorns
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text6
  1842  000A5E                     __ptext6:
  1843                           	opt stack 0
  1844  000A5E                     ___awdiv:
  1845                           	opt stack 27
  1846                           
  1847                           ;incstack = 0
  1848  000A5E  0E00               	movlw	0
  1849  000A60  6E18               	movwf	___awdiv@sign,c
  1850  000A62  AE16               	btfss	___awdiv@divisor+1,7,c
  1851  000A64  D006               	goto	l2297
  1852  000A66  6C15               	negf	___awdiv@divisor,c
  1853  000A68  1E16               	comf	___awdiv@divisor+1,f,c
  1854  000A6A  B0D8               	btfsc	status,0,c
  1855  000A6C  2A16               	incf	___awdiv@divisor+1,f,c
  1856  000A6E  0E01               	movlw	1
  1857  000A70  6E18               	movwf	___awdiv@sign,c
  1858  000A72                     l2297:
  1859  000A72  AE14               	btfss	___awdiv@dividend+1,7,c
  1860  000A74  D006               	goto	l2303
  1861  000A76  6C13               	negf	___awdiv@dividend,c
  1862  000A78  1E14               	comf	___awdiv@dividend+1,f,c
  1863  000A7A  B0D8               	btfsc	status,0,c
  1864  000A7C  2A14               	incf	___awdiv@dividend+1,f,c
  1865  000A7E  0E01               	movlw	1
  1866  000A80  1A18               	xorwf	___awdiv@sign,f,c
  1867  000A82                     l2303:
  1868  000A82  0E00               	movlw	0
  1869  000A84  6E1A               	movwf	___awdiv@quotient+1,c
  1870  000A86  0E00               	movlw	0
  1871  000A88  6E19               	movwf	___awdiv@quotient,c
  1872  000A8A  5015               	movf	___awdiv@divisor,w,c
  1873  000A8C  1016               	iorwf	___awdiv@divisor+1,w,c
  1874  000A8E  B4D8               	btfsc	status,2,c
  1875  000A90  D01C               	goto	l2325
  1876  000A92  0E01               	movlw	1
  1877  000A94  6E17               	movwf	___awdiv@counter,c
  1878  000A96  D004               	goto	l2311
  1879  000A98                     l2309:
  1880  000A98  90D8               	bcf	status,0,c
  1881  000A9A  3615               	rlcf	___awdiv@divisor,f,c
  1882  000A9C  3616               	rlcf	___awdiv@divisor+1,f,c
  1883  000A9E  2A17               	incf	___awdiv@counter,f,c
  1884  000AA0                     l2311:
  1885  000AA0  AE16               	btfss	___awdiv@divisor+1,7,c
  1886  000AA2  D7FA               	goto	l2309
  1887  000AA4                     l2313:
  1888  000AA4  90D8               	bcf	status,0,c
  1889  000AA6  3619               	rlcf	___awdiv@quotient,f,c
  1890  000AA8  361A               	rlcf	___awdiv@quotient+1,f,c
  1891  000AAA  5015               	movf	___awdiv@divisor,w,c
  1892  000AAC  5C13               	subwf	___awdiv@dividend,w,c
  1893  000AAE  5016               	movf	___awdiv@divisor+1,w,c
  1894  000AB0  5814               	subwfb	___awdiv@dividend+1,w,c
  1895  000AB2  A0D8               	btfss	status,0,c
  1896  000AB4  D005               	goto	l2321
  1897  000AB6  5015               	movf	___awdiv@divisor,w,c
  1898  000AB8  5E13               	subwf	___awdiv@dividend,f,c
  1899  000ABA  5016               	movf	___awdiv@divisor+1,w,c
  1900  000ABC  5A14               	subwfb	___awdiv@dividend+1,f,c
  1901  000ABE  8019               	bsf	___awdiv@quotient,0,c
  1902  000AC0                     l2321:
  1903  000AC0  90D8               	bcf	status,0,c
  1904  000AC2  3216               	rrcf	___awdiv@divisor+1,f,c
  1905  000AC4  3215               	rrcf	___awdiv@divisor,f,c
  1906  000AC6  2E17               	decfsz	___awdiv@counter,f,c
  1907  000AC8  D7ED               	goto	l2313
  1908  000ACA                     l2325:
  1909  000ACA  5018               	movf	___awdiv@sign,w,c
  1910  000ACC  B4D8               	btfsc	status,2,c
  1911  000ACE  D004               	goto	l2329
  1912  000AD0  6C19               	negf	___awdiv@quotient,c
  1913  000AD2  1E1A               	comf	___awdiv@quotient+1,f,c
  1914  000AD4  B0D8               	btfsc	status,0,c
  1915  000AD6  2A1A               	incf	___awdiv@quotient+1,f,c
  1916  000AD8                     l2329:
  1917  000AD8  C019  F013         	movff	___awdiv@quotient,?___awdiv
  1918  000ADC  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  1919  000AE0  0012               	return	
  1920  000AE2                     __end_of___awdiv:
  1921                           	opt stack 0
  1922                           tblptru	equ	0xFF8
  1923                           tblptrh	equ	0xFF7
  1924                           tblptrl	equ	0xFF6
  1925                           tablat	equ	0xFF5
  1926                           prodh	equ	0xFF4
  1927                           prodl	equ	0xFF3
  1928                           postinc0	equ	0xFEE
  1929                           wreg	equ	0xFE8
  1930                           indf1	equ	0xFE7
  1931                           postdec1	equ	0xFE5
  1932                           fsr1h	equ	0xFE2
  1933                           fsr1l	equ	0xFE1
  1934                           indf2	equ	0xFDF
  1935                           postinc2	equ	0xFDE
  1936                           postdec2	equ	0xFDD
  1937                           fsr2h	equ	0xFDA
  1938                           fsr2l	equ	0xFD9
  1939                           status	equ	0xFD8
  1940                           
  1941 ;; *************** function _moving_avarege *****************
  1942 ;; Defined at:
  1943 ;;		line 7 in file "averageMoving.c"
  1944 ;; Parameters:    Size  Location     Type
  1945 ;;  new_lavue       2   32[COMRAM] int 
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;  sum             4   40[COMRAM] long 
  1948 ;;  i               2   44[COMRAM] int 
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  2   32[COMRAM] int 
  1951 ;; Registers used:
  1952 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1958 ;;      Params:         2       0       0       0       0       0       0       0       0
  1959 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1960 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1961 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1962 ;;Total ram usage:       14 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    3
  1965 ;; This function calls:
  1966 ;;		___aldiv
  1967 ;; This function is called by:
  1968 ;;		_main
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text7
  1973  00070C                     __ptext7:
  1974                           	opt stack 0
  1975  00070C                     _moving_avarege:
  1976                           	opt stack 27
  1977                           
  1978                           ;averageMoving.c: 9: int i;
  1979                           ;averageMoving.c: 10: long int sum = 0;
  1980                           
  1981                           ;incstack = 0
  1982  00070C  0E00               	movlw	0
  1983  00070E  6E29               	movwf	moving_avarege@sum,c
  1984  000710  0E00               	movlw	0
  1985  000712  6E2A               	movwf	moving_avarege@sum+1,c
  1986  000714  0E00               	movlw	0
  1987  000716  6E2B               	movwf	moving_avarege@sum+2,c
  1988  000718  0E00               	movlw	0
  1989  00071A  6E2C               	movwf	moving_avarege@sum+3,c
  1990                           
  1991                           ;averageMoving.c: 12: for(i=15;i>0;i--){
  1992  00071C  0E00               	movlw	0
  1993  00071E  6E2E               	movwf	moving_avarege@i+1,c
  1994  000720  0E0F               	movlw	15
  1995  000722  6E2D               	movwf	moving_avarege@i,c
  1996  000724                     l2457:
  1997  000724  BE2E               	btfsc	moving_avarege@i+1,7,c
  1998  000726  D02B               	goto	l360
  1999  000728  502E               	movf	moving_avarege@i+1,w,c
  2000  00072A  E103               	bnz	l2461
  2001  00072C  042D               	decf	moving_avarege@i,w,c
  2002  00072E  A0D8               	btfss	status,0,c
  2003  000730  D026               	goto	l360
  2004  000732                     l2461:
  2005                           
  2006                           ;averageMoving.c: 14: vals[i] = vals[i-1];
  2007  000732  0EFE               	movlw	254
  2008  000734  6E23               	movwf	??_moving_avarege& (0+255),c
  2009  000736  0EFF               	movlw	255
  2010  000738  6E24               	movwf	(??_moving_avarege+1)& (0+255),c
  2011  00073A  C02D  F025         	movff	moving_avarege@i,??_moving_avarege+2
  2012  00073E  C02E  F026         	movff	moving_avarege@i+1,??_moving_avarege+3
  2013  000742  90D8               	bcf	status,0,c
  2014  000744  3625               	rlcf	??_moving_avarege+2,f,c
  2015  000746  3626               	rlcf	??_moving_avarege+3,f,c
  2016  000748  5023               	movf	??_moving_avarege,w,c
  2017  00074A  2625               	addwf	??_moving_avarege+2,f,c
  2018  00074C  5024               	movf	??_moving_avarege+1,w,c
  2019  00074E  2226               	addwfc	??_moving_avarege+3,f,c
  2020  000750  0E60               	movlw	low _vals
  2021  000752  2425               	addwf	??_moving_avarege+2,w,c
  2022  000754  6ED9               	movwf	fsr2l,c
  2023  000756  0E00               	movlw	high _vals
  2024  000758  2026               	addwfc	??_moving_avarege+3,w,c
  2025  00075A  6EDA               	movwf	fsr2h,c
  2026  00075C  90D8               	bcf	status,0,c
  2027  00075E  342D               	rlcf	moving_avarege@i,w,c
  2028  000760  6EE1               	movwf	fsr1l,c
  2029  000762  342E               	rlcf	moving_avarege@i+1,w,c
  2030  000764  6EE2               	movwf	fsr1h,c
  2031  000766  0E60               	movlw	low _vals
  2032  000768  26E1               	addwf	fsr1l,f,c
  2033  00076A  0E00               	movlw	high _vals
  2034  00076C  22E2               	addwfc	fsr1h,f,c
  2035  00076E  CFDE FFE6          	movff	postinc2,postinc1
  2036  000772  CFDD FFE5          	movff	postdec2,postdec1
  2037  000776  062D               	decf	moving_avarege@i,f,c
  2038  000778  A0D8               	btfss	status,0,c
  2039  00077A  062E               	decf	moving_avarege@i+1,f,c
  2040  00077C  D7D3               	goto	l2457
  2041  00077E                     l360:
  2042                           
  2043                           ;averageMoving.c: 16: }
  2044                           ;averageMoving.c: 18: vals[0] = new_lavue;
  2045  00077E  C021  F060         	movff	moving_avarege@new_lavue,_vals
  2046  000782  C022  F061         	movff	moving_avarege@new_lavue+1,_vals+1
  2047                           
  2048                           ;averageMoving.c: 20: for(i= 0; i < 15; i++){
  2049  000786  0E00               	movlw	0
  2050  000788  6E2E               	movwf	moving_avarege@i+1,c
  2051  00078A  0E00               	movlw	0
  2052  00078C  6E2D               	movwf	moving_avarege@i,c
  2053  00078E                     l2469:
  2054  00078E  BE2E               	btfsc	moving_avarege@i+1,7,c
  2055  000790  D006               	goto	l2473
  2056  000792  502E               	movf	moving_avarege@i+1,w,c
  2057  000794  E125               	bnz	l2479
  2058  000796  0E0F               	movlw	15
  2059  000798  5C2D               	subwf	moving_avarege@i,w,c
  2060  00079A  B0D8               	btfsc	status,0,c
  2061  00079C  D021               	goto	l2479
  2062  00079E                     l2473:
  2063                           
  2064                           ;averageMoving.c: 22: sum += vals[i];
  2065  00079E  90D8               	bcf	status,0,c
  2066  0007A0  342D               	rlcf	moving_avarege@i,w,c
  2067  0007A2  6ED9               	movwf	fsr2l,c
  2068  0007A4  342E               	rlcf	moving_avarege@i+1,w,c
  2069  0007A6  6EDA               	movwf	fsr2h,c
  2070  0007A8  0E60               	movlw	low _vals
  2071  0007AA  26D9               	addwf	fsr2l,f,c
  2072  0007AC  0E00               	movlw	high _vals
  2073  0007AE  22DA               	addwfc	fsr2h,f,c
  2074  0007B0  CFDE F023          	movff	postinc2,??_moving_avarege
  2075  0007B4  CFDD F024          	movff	postdec2,??_moving_avarege+1
  2076  0007B8  C023  F025         	movff	??_moving_avarege,??_moving_avarege+2
  2077  0007BC  C024  F026         	movff	??_moving_avarege+1,??_moving_avarege+3
  2078  0007C0  0E00               	movlw	0
  2079  0007C2  BE26               	btfsc	(??_moving_avarege+3)& (0+255),7,c
  2080  0007C4  0EFF               	movlw	255
  2081  0007C6  6E27               	movwf	(??_moving_avarege+4)& (0+255),c
  2082  0007C8  6E28               	movwf	(??_moving_avarege+5)& (0+255),c
  2083  0007CA  5025               	movf	??_moving_avarege+2,w,c
  2084  0007CC  2629               	addwf	moving_avarege@sum,f,c
  2085  0007CE  5026               	movf	??_moving_avarege+3,w,c
  2086  0007D0  222A               	addwfc	moving_avarege@sum+1,f,c
  2087  0007D2  5027               	movf	??_moving_avarege+4,w,c
  2088  0007D4  222B               	addwfc	moving_avarege@sum+2,f,c
  2089  0007D6  5028               	movf	??_moving_avarege+5,w,c
  2090  0007D8  222C               	addwfc	moving_avarege@sum+3,f,c
  2091  0007DA  4A2D               	infsnz	moving_avarege@i,f,c
  2092  0007DC  2A2E               	incf	moving_avarege@i+1,f,c
  2093  0007DE  D7D7               	goto	l2469
  2094  0007E0                     l2479:
  2095                           
  2096                           ;averageMoving.c: 23: }
  2097                           ;averageMoving.c: 25: return sum/15;
  2098  0007E0  C029  F013         	movff	moving_avarege@sum,___aldiv@dividend
  2099  0007E4  C02A  F014         	movff	moving_avarege@sum+1,___aldiv@dividend+1
  2100  0007E8  C02B  F015         	movff	moving_avarege@sum+2,___aldiv@dividend+2
  2101  0007EC  C02C  F016         	movff	moving_avarege@sum+3,___aldiv@dividend+3
  2102  0007F0  0E0F               	movlw	15
  2103  0007F2  6E17               	movwf	___aldiv@divisor,c
  2104  0007F4  0E00               	movlw	0
  2105  0007F6  6E18               	movwf	___aldiv@divisor+1,c
  2106  0007F8  0E00               	movlw	0
  2107  0007FA  6E19               	movwf	___aldiv@divisor+2,c
  2108  0007FC  0E00               	movlw	0
  2109  0007FE  6E1A               	movwf	___aldiv@divisor+3,c
  2110  000800  EC85  F004         	call	___aldiv	;wreg free
  2111  000804  C013  F021         	movff	?___aldiv,?_moving_avarege
  2112  000808  C014  F022         	movff	?___aldiv+1,?_moving_avarege+1
  2113  00080C  0012               	return	
  2114  00080E                     __end_of_moving_avarege:
  2115                           	opt stack 0
  2116                           tblptru	equ	0xFF8
  2117                           tblptrh	equ	0xFF7
  2118                           tblptrl	equ	0xFF6
  2119                           tablat	equ	0xFF5
  2120                           prodh	equ	0xFF4
  2121                           prodl	equ	0xFF3
  2122                           postinc0	equ	0xFEE
  2123                           wreg	equ	0xFE8
  2124                           indf1	equ	0xFE7
  2125                           postinc1	equ	0xFE6
  2126                           postdec1	equ	0xFE5
  2127                           fsr1h	equ	0xFE2
  2128                           fsr1l	equ	0xFE1
  2129                           indf2	equ	0xFDF
  2130                           postinc2	equ	0xFDE
  2131                           postdec2	equ	0xFDD
  2132                           fsr2h	equ	0xFDA
  2133                           fsr2l	equ	0xFD9
  2134                           status	equ	0xFD8
  2135                           
  2136 ;; *************** function ___aldiv *****************
  2137 ;; Defined at:
  2138 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\aldiv.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;  dividend        4   18[COMRAM] long 
  2141 ;;  divisor         4   22[COMRAM] long 
  2142 ;; Auto vars:     Size  Location     Type
  2143 ;;  quotient        4   28[COMRAM] long 
  2144 ;;  sign            1   27[COMRAM] unsigned char 
  2145 ;;  counter         1   26[COMRAM] unsigned char 
  2146 ;; Return value:  Size  Location     Type
  2147 ;;                  4   18[COMRAM] long 
  2148 ;; Registers used:
  2149 ;;		wreg, status,2, status,0
  2150 ;; Tracked objects:
  2151 ;;		On entry : 0/0
  2152 ;;		On exit  : 0/0
  2153 ;;		Unchanged: 0/0
  2154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2155 ;;      Params:         8       0       0       0       0       0       0       0       0
  2156 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2157 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2158 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2159 ;;Total ram usage:       14 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:    2
  2162 ;; This function calls:
  2163 ;;		Nothing
  2164 ;; This function is called by:
  2165 ;;		_moving_avarege
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text8
  2170  00090A                     __ptext8:
  2171                           	opt stack 0
  2172  00090A                     ___aldiv:
  2173                           	opt stack 27
  2174                           
  2175                           ;incstack = 0
  2176  00090A  0E00               	movlw	0
  2177  00090C  6E1C               	movwf	___aldiv@sign,c
  2178  00090E  AE1A               	btfss	___aldiv@divisor+3,7,c
  2179  000910  D00A               	goto	l2253
  2180  000912  1E1A               	comf	___aldiv@divisor+3,f,c
  2181  000914  1E19               	comf	___aldiv@divisor+2,f,c
  2182  000916  1E18               	comf	___aldiv@divisor+1,f,c
  2183  000918  6C17               	negf	___aldiv@divisor,c
  2184  00091A  0E00               	movlw	0
  2185  00091C  2218               	addwfc	___aldiv@divisor+1,f,c
  2186  00091E  2219               	addwfc	___aldiv@divisor+2,f,c
  2187  000920  221A               	addwfc	___aldiv@divisor+3,f,c
  2188  000922  0E01               	movlw	1
  2189  000924  6E1C               	movwf	___aldiv@sign,c
  2190  000926                     l2253:
  2191  000926  AE16               	btfss	___aldiv@dividend+3,7,c
  2192  000928  D00A               	goto	l2259
  2193  00092A  1E16               	comf	___aldiv@dividend+3,f,c
  2194  00092C  1E15               	comf	___aldiv@dividend+2,f,c
  2195  00092E  1E14               	comf	___aldiv@dividend+1,f,c
  2196  000930  6C13               	negf	___aldiv@dividend,c
  2197  000932  0E00               	movlw	0
  2198  000934  2214               	addwfc	___aldiv@dividend+1,f,c
  2199  000936  2215               	addwfc	___aldiv@dividend+2,f,c
  2200  000938  2216               	addwfc	___aldiv@dividend+3,f,c
  2201  00093A  0E01               	movlw	1
  2202  00093C  1A1C               	xorwf	___aldiv@sign,f,c
  2203  00093E                     l2259:
  2204  00093E  0E00               	movlw	0
  2205  000940  6E1D               	movwf	___aldiv@quotient,c
  2206  000942  0E00               	movlw	0
  2207  000944  6E1E               	movwf	___aldiv@quotient+1,c
  2208  000946  0E00               	movlw	0
  2209  000948  6E1F               	movwf	___aldiv@quotient+2,c
  2210  00094A  0E00               	movlw	0
  2211  00094C  6E20               	movwf	___aldiv@quotient+3,c
  2212  00094E  5017               	movf	___aldiv@divisor,w,c
  2213  000950  1018               	iorwf	___aldiv@divisor+1,w,c
  2214  000952  1019               	iorwf	___aldiv@divisor+2,w,c
  2215  000954  101A               	iorwf	___aldiv@divisor+3,w,c
  2216  000956  B4D8               	btfsc	status,2,c
  2217  000958  D02A               	goto	l2281
  2218  00095A  0E01               	movlw	1
  2219  00095C  6E1B               	movwf	___aldiv@counter,c
  2220  00095E  D006               	goto	l2267
  2221  000960                     l2265:
  2222  000960  90D8               	bcf	status,0,c
  2223  000962  3617               	rlcf	___aldiv@divisor,f,c
  2224  000964  3618               	rlcf	___aldiv@divisor+1,f,c
  2225  000966  3619               	rlcf	___aldiv@divisor+2,f,c
  2226  000968  361A               	rlcf	___aldiv@divisor+3,f,c
  2227  00096A  2A1B               	incf	___aldiv@counter,f,c
  2228  00096C                     l2267:
  2229  00096C  AE1A               	btfss	___aldiv@divisor+3,7,c
  2230  00096E  D7F8               	goto	l2265
  2231  000970                     l2269:
  2232  000970  90D8               	bcf	status,0,c
  2233  000972  361D               	rlcf	___aldiv@quotient,f,c
  2234  000974  361E               	rlcf	___aldiv@quotient+1,f,c
  2235  000976  361F               	rlcf	___aldiv@quotient+2,f,c
  2236  000978  3620               	rlcf	___aldiv@quotient+3,f,c
  2237  00097A  5017               	movf	___aldiv@divisor,w,c
  2238  00097C  5C13               	subwf	___aldiv@dividend,w,c
  2239  00097E  5018               	movf	___aldiv@divisor+1,w,c
  2240  000980  5814               	subwfb	___aldiv@dividend+1,w,c
  2241  000982  5019               	movf	___aldiv@divisor+2,w,c
  2242  000984  5815               	subwfb	___aldiv@dividend+2,w,c
  2243  000986  501A               	movf	___aldiv@divisor+3,w,c
  2244  000988  5816               	subwfb	___aldiv@dividend+3,w,c
  2245  00098A  A0D8               	btfss	status,0,c
  2246  00098C  D009               	goto	l2277
  2247  00098E  5017               	movf	___aldiv@divisor,w,c
  2248  000990  5E13               	subwf	___aldiv@dividend,f,c
  2249  000992  5018               	movf	___aldiv@divisor+1,w,c
  2250  000994  5A14               	subwfb	___aldiv@dividend+1,f,c
  2251  000996  5019               	movf	___aldiv@divisor+2,w,c
  2252  000998  5A15               	subwfb	___aldiv@dividend+2,f,c
  2253  00099A  501A               	movf	___aldiv@divisor+3,w,c
  2254  00099C  5A16               	subwfb	___aldiv@dividend+3,f,c
  2255  00099E  801D               	bsf	___aldiv@quotient,0,c
  2256  0009A0                     l2277:
  2257  0009A0  90D8               	bcf	status,0,c
  2258  0009A2  321A               	rrcf	___aldiv@divisor+3,f,c
  2259  0009A4  3219               	rrcf	___aldiv@divisor+2,f,c
  2260  0009A6  3218               	rrcf	___aldiv@divisor+1,f,c
  2261  0009A8  3217               	rrcf	___aldiv@divisor,f,c
  2262  0009AA  2E1B               	decfsz	___aldiv@counter,f,c
  2263  0009AC  D7E1               	goto	l2269
  2264  0009AE                     l2281:
  2265  0009AE  501C               	movf	___aldiv@sign,w,c
  2266  0009B0  B4D8               	btfsc	status,2,c
  2267  0009B2  D008               	goto	l2285
  2268  0009B4  1E20               	comf	___aldiv@quotient+3,f,c
  2269  0009B6  1E1F               	comf	___aldiv@quotient+2,f,c
  2270  0009B8  1E1E               	comf	___aldiv@quotient+1,f,c
  2271  0009BA  6C1D               	negf	___aldiv@quotient,c
  2272  0009BC  0E00               	movlw	0
  2273  0009BE  221E               	addwfc	___aldiv@quotient+1,f,c
  2274  0009C0  221F               	addwfc	___aldiv@quotient+2,f,c
  2275  0009C2  2220               	addwfc	___aldiv@quotient+3,f,c
  2276  0009C4                     l2285:
  2277  0009C4  C01D  F013         	movff	___aldiv@quotient,?___aldiv
  2278  0009C8  C01E  F014         	movff	___aldiv@quotient+1,?___aldiv+1
  2279  0009CC  C01F  F015         	movff	___aldiv@quotient+2,?___aldiv+2
  2280  0009D0  C020  F016         	movff	___aldiv@quotient+3,?___aldiv+3
  2281  0009D4  0012               	return	
  2282  0009D6                     __end_of___aldiv:
  2283                           	opt stack 0
  2284                           tblptru	equ	0xFF8
  2285                           tblptrh	equ	0xFF7
  2286                           tblptrl	equ	0xFF6
  2287                           tablat	equ	0xFF5
  2288                           prodh	equ	0xFF4
  2289                           prodl	equ	0xFF3
  2290                           postinc0	equ	0xFEE
  2291                           wreg	equ	0xFE8
  2292                           indf1	equ	0xFE7
  2293                           postinc1	equ	0xFE6
  2294                           postdec1	equ	0xFE5
  2295                           fsr1h	equ	0xFE2
  2296                           fsr1l	equ	0xFE1
  2297                           indf2	equ	0xFDF
  2298                           postinc2	equ	0xFDE
  2299                           postdec2	equ	0xFDD
  2300                           fsr2h	equ	0xFDA
  2301                           fsr2l	equ	0xFD9
  2302                           status	equ	0xFD8
  2303                           
  2304 ;; *************** function _enviaSerial *****************
  2305 ;; Defined at:
  2306 ;;		line 26 in file "serial.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  c               1    wreg     unsigned char 
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;  c               1   18[COMRAM] unsigned char 
  2311 ;; Return value:  Size  Location     Type
  2312 ;;		None               void
  2313 ;; Registers used:
  2314 ;;		wreg
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2320 ;;      Params:         0       0       0       0       0       0       0       0       0
  2321 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2322 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2323 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2324 ;;Total ram usage:        1 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:    2
  2327 ;; This function calls:
  2328 ;;		Nothing
  2329 ;; This function is called by:
  2330 ;;		_main
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text9
  2335  000E72                     __ptext9:
  2336                           	opt stack 0
  2337  000E72                     _enviaSerial:
  2338                           	opt stack 28
  2339                           
  2340                           ;incstack = 0
  2341                           ;enviaSerial@c stored from wreg
  2342  000E72  6E13               	movwf	enviaSerial@c,c
  2343  000E74                     l346:
  2344  000E74  A89E               	btfss	3998,4,c	;volatile
  2345  000E76  D7FE               	goto	l346
  2346                           
  2347                           ;serial.c: 28: TXREG = c;
  2348  000E78  C013  FFAD         	movff	enviaSerial@c,4013	;volatile
  2349  000E7C  0012               	return		;funcret
  2350  000E7E                     __end_of_enviaSerial:
  2351                           	opt stack 0
  2352                           tblptru	equ	0xFF8
  2353                           tblptrh	equ	0xFF7
  2354                           tblptrl	equ	0xFF6
  2355                           tablat	equ	0xFF5
  2356                           prodh	equ	0xFF4
  2357                           prodl	equ	0xFF3
  2358                           postinc0	equ	0xFEE
  2359                           wreg	equ	0xFE8
  2360                           indf1	equ	0xFE7
  2361                           postinc1	equ	0xFE6
  2362                           postdec1	equ	0xFE5
  2363                           fsr1h	equ	0xFE2
  2364                           fsr1l	equ	0xFE1
  2365                           indf2	equ	0xFDF
  2366                           postinc2	equ	0xFDE
  2367                           postdec2	equ	0xFDD
  2368                           fsr2h	equ	0xFDA
  2369                           fsr2l	equ	0xFD9
  2370                           status	equ	0xFD8
  2371                           
  2372 ;; *************** function _calibrates_sensors *****************
  2373 ;; Defined at:
  2374 ;;		line 36 in file "ReflectanceSensors.c"
  2375 ;; Parameters:    Size  Location     Type
  2376 ;;		None
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;  bar_sensorns   16   27[COMRAM] unsigned int [8]
  2379 ;;  i               2   43[COMRAM] unsigned int 
  2380 ;; Return value:  Size  Location     Type
  2381 ;;		None               void
  2382 ;; Registers used:
  2383 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2384 ;; Tracked objects:
  2385 ;;		On entry : 0/0
  2386 ;;		On exit  : 0/0
  2387 ;;		Unchanged: 0/0
  2388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2389 ;;      Params:         0       0       0       0       0       0       0       0       0
  2390 ;;      Locals:        18       0       0       0       0       0       0       0       0
  2391 ;;      Temps:          4       0       0       0       0       0       0       0       0
  2392 ;;      Totals:        22       0       0       0       0       0       0       0       0
  2393 ;;Total ram usage:       22 bytes
  2394 ;; Hardware stack levels used:    1
  2395 ;; Hardware stack levels required when called:    3
  2396 ;; This function calls:
  2397 ;;		_valor_AD
  2398 ;; This function is called by:
  2399 ;;		_main
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           	psect	text10
  2404  00080E                     __ptext10:
  2405                           	opt stack 0
  2406  00080E                     _calibrates_sensors:
  2407                           	opt stack 27
  2408                           
  2409                           ;ReflectanceSensors.c: 38: unsigned int bar_sensorns[8];
  2410                           ;ReflectanceSensors.c: 39: unsigned int i;
  2411                           ;ReflectanceSensors.c: 41: for (i = 0; i < 8; i++) {
  2412                           
  2413                           ;incstack = 0
  2414  00080E  0E00               	movlw	0
  2415  000810  6E2D               	movwf	calibrates_sensors@i+1,c
  2416  000812  0E00               	movlw	0
  2417  000814  6E2C               	movwf	calibrates_sensors@i,c
  2418  000816  502D               	movf	calibrates_sensors@i+1,w,c
  2419  000818  E105               	bnz	u1570
  2420  00081A  0E08               	movlw	8
  2421  00081C  5C2C               	subwf	calibrates_sensors@i,w,c
  2422  00081E  B0D8               	btfsc	status,0,c
  2423  000820  0012               	return	
  2424  000822  D001               	goto	l2389
  2425  000824                     u1570:
  2426  000824  0012               	return	
  2427  000826                     l2389:
  2428                           
  2429                           ;ReflectanceSensors.c: 43: bar_sensorns[i] = valor_AD(i);
  2430  000826  502C               	movf	calibrates_sensors@i,w,c
  2431  000828  EC32  F006         	call	_valor_AD
  2432  00082C  90D8               	bcf	status,0,c
  2433  00082E  342C               	rlcf	calibrates_sensors@i,w,c
  2434  000830  6ED9               	movwf	fsr2l,c
  2435  000832  342D               	rlcf	calibrates_sensors@i+1,w,c
  2436  000834  6EDA               	movwf	fsr2h,c
  2437  000836  0E1C               	movlw	low calibrates_sensors@bar_sensorns
  2438  000838  26D9               	addwf	fsr2l,f,c
  2439  00083A  0E00               	movlw	high calibrates_sensors@bar_sensorns
  2440  00083C  22DA               	addwfc	fsr2h,f,c
  2441  00083E  C013  FFDE         	movff	?_valor_AD,postinc2
  2442  000842  C014  FFDD         	movff	?_valor_AD+1,postdec2
  2443                           
  2444                           ;ReflectanceSensors.c: 45: if (bar_sensorns[i] > MAX_sensorns[i]) {
  2445  000846  90D8               	bcf	status,0,c
  2446  000848  342C               	rlcf	calibrates_sensors@i,w,c
  2447  00084A  6ED9               	movwf	fsr2l,c
  2448  00084C  342D               	rlcf	calibrates_sensors@i+1,w,c
  2449  00084E  6EDA               	movwf	fsr2h,c
  2450  000850  0E1C               	movlw	low calibrates_sensors@bar_sensorns
  2451  000852  26D9               	addwf	fsr2l,f,c
  2452  000854  0E00               	movlw	high calibrates_sensors@bar_sensorns
  2453  000856  22DA               	addwfc	fsr2h,f,c
  2454  000858  90D8               	bcf	status,0,c
  2455  00085A  342C               	rlcf	calibrates_sensors@i,w,c
  2456  00085C  6EE1               	movwf	fsr1l,c
  2457  00085E  342D               	rlcf	calibrates_sensors@i+1,w,c
  2458  000860  6EE2               	movwf	fsr1h,c
  2459  000862  0E7E               	movlw	low _MAX_sensorns
  2460  000864  26E1               	addwf	fsr1l,f,c
  2461  000866  0E00               	movlw	high _MAX_sensorns
  2462  000868  22E2               	addwfc	fsr1h,f,c
  2463  00086A  50DE               	movf	postinc2,w,c
  2464  00086C  5CE6               	subwf	postinc1,w,c
  2465  00086E  50DE               	movf	postinc2,w,c
  2466  000870  58E6               	subwfb	postinc1,w,c
  2467  000872  B0D8               	btfsc	status,0,c
  2468  000874  D016               	goto	l2395
  2469                           
  2470                           ;ReflectanceSensors.c: 46: MAX_sensorns[i] = bar_sensorns[i];
  2471  000876  90D8               	bcf	status,0,c
  2472  000878  342C               	rlcf	calibrates_sensors@i,w,c
  2473  00087A  6ED9               	movwf	fsr2l,c
  2474  00087C  342D               	rlcf	calibrates_sensors@i+1,w,c
  2475  00087E  6EDA               	movwf	fsr2h,c
  2476  000880  0E1C               	movlw	low calibrates_sensors@bar_sensorns
  2477  000882  26D9               	addwf	fsr2l,f,c
  2478  000884  0E00               	movlw	high calibrates_sensors@bar_sensorns
  2479  000886  22DA               	addwfc	fsr2h,f,c
  2480  000888  90D8               	bcf	status,0,c
  2481  00088A  342C               	rlcf	calibrates_sensors@i,w,c
  2482  00088C  6EE1               	movwf	fsr1l,c
  2483  00088E  342D               	rlcf	calibrates_sensors@i+1,w,c
  2484  000890  6EE2               	movwf	fsr1h,c
  2485  000892  0E7E               	movlw	low _MAX_sensorns
  2486  000894  26E1               	addwf	fsr1l,f,c
  2487  000896  0E00               	movlw	high _MAX_sensorns
  2488  000898  22E2               	addwfc	fsr1h,f,c
  2489  00089A  CFDE FFE6          	movff	postinc2,postinc1
  2490  00089E  CFDD FFE5          	movff	postdec2,postdec1
  2491  0008A2                     l2395:
  2492                           
  2493                           ;ReflectanceSensors.c: 47: }
  2494                           ;ReflectanceSensors.c: 49: if (bar_sensorns[i] < MIN_sensorns[i]) {
  2495  0008A2  90D8               	bcf	status,0,c
  2496  0008A4  342C               	rlcf	calibrates_sensors@i,w,c
  2497  0008A6  6ED9               	movwf	fsr2l,c
  2498  0008A8  342D               	rlcf	calibrates_sensors@i+1,w,c
  2499  0008AA  6EDA               	movwf	fsr2h,c
  2500  0008AC  0ED1               	movlw	low _MIN_sensorns
  2501  0008AE  26D9               	addwf	fsr2l,f,c
  2502  0008B0  0E00               	movlw	high _MIN_sensorns
  2503  0008B2  22DA               	addwfc	fsr2h,f,c
  2504  0008B4  90D8               	bcf	status,0,c
  2505  0008B6  342C               	rlcf	calibrates_sensors@i,w,c
  2506  0008B8  6EE1               	movwf	fsr1l,c
  2507  0008BA  342D               	rlcf	calibrates_sensors@i+1,w,c
  2508  0008BC  6EE2               	movwf	fsr1h,c
  2509  0008BE  0E1C               	movlw	low calibrates_sensors@bar_sensorns
  2510  0008C0  26E1               	addwf	fsr1l,f,c
  2511  0008C2  0E00               	movlw	high calibrates_sensors@bar_sensorns
  2512  0008C4  22E2               	addwfc	fsr1h,f,c
  2513  0008C6  50DE               	movf	postinc2,w,c
  2514  0008C8  5CE6               	subwf	postinc1,w,c
  2515  0008CA  50DE               	movf	postinc2,w,c
  2516  0008CC  58E6               	subwfb	postinc1,w,c
  2517  0008CE  B0D8               	btfsc	status,0,c
  2518  0008D0  D016               	goto	l2399
  2519                           
  2520                           ;ReflectanceSensors.c: 50: MIN_sensorns[i] = bar_sensorns[i];
  2521  0008D2  90D8               	bcf	status,0,c
  2522  0008D4  342C               	rlcf	calibrates_sensors@i,w,c
  2523  0008D6  6ED9               	movwf	fsr2l,c
  2524  0008D8  342D               	rlcf	calibrates_sensors@i+1,w,c
  2525  0008DA  6EDA               	movwf	fsr2h,c
  2526  0008DC  0E1C               	movlw	low calibrates_sensors@bar_sensorns
  2527  0008DE  26D9               	addwf	fsr2l,f,c
  2528  0008E0  0E00               	movlw	high calibrates_sensors@bar_sensorns
  2529  0008E2  22DA               	addwfc	fsr2h,f,c
  2530  0008E4  90D8               	bcf	status,0,c
  2531  0008E6  342C               	rlcf	calibrates_sensors@i,w,c
  2532  0008E8  6EE1               	movwf	fsr1l,c
  2533  0008EA  342D               	rlcf	calibrates_sensors@i+1,w,c
  2534  0008EC  6EE2               	movwf	fsr1h,c
  2535  0008EE  0ED1               	movlw	low _MIN_sensorns
  2536  0008F0  26E1               	addwf	fsr1l,f,c
  2537  0008F2  0E00               	movlw	high _MIN_sensorns
  2538  0008F4  22E2               	addwfc	fsr1h,f,c
  2539  0008F6  CFDE FFE6          	movff	postinc2,postinc1
  2540  0008FA  CFDD FFE5          	movff	postdec2,postdec1
  2541  0008FE                     l2399:
  2542  0008FE  4A2C               	infsnz	calibrates_sensors@i,f,c
  2543  000900  2A2D               	incf	calibrates_sensors@i+1,f,c
  2544  000902  502D               	movf	calibrates_sensors@i+1,w,c
  2545  000904  E101               	bnz	l289
  2546  000906  D789               	goto	L2
  2547  000908                     l289:
  2548  000908  0012               	return		;funcret
  2549  00090A                     __end_of_calibrates_sensors:
  2550                           	opt stack 0
  2551                           tblptru	equ	0xFF8
  2552                           tblptrh	equ	0xFF7
  2553                           tblptrl	equ	0xFF6
  2554                           tablat	equ	0xFF5
  2555                           prodh	equ	0xFF4
  2556                           prodl	equ	0xFF3
  2557                           postinc0	equ	0xFEE
  2558                           wreg	equ	0xFE8
  2559                           indf1	equ	0xFE7
  2560                           postinc1	equ	0xFE6
  2561                           postdec1	equ	0xFE5
  2562                           fsr1h	equ	0xFE2
  2563                           fsr1l	equ	0xFE1
  2564                           indf2	equ	0xFDF
  2565                           postinc2	equ	0xFDE
  2566                           postdec2	equ	0xFDD
  2567                           fsr2h	equ	0xFDA
  2568                           fsr2l	equ	0xFD9
  2569                           status	equ	0xFD8
  2570                           
  2571 ;; *************** function _valor_AD *****************
  2572 ;; Defined at:
  2573 ;;		line 59 in file "conversorAD.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  chanel          1    wreg     unsigned char 
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;  chanel          1   20[COMRAM] unsigned char 
  2578 ;;  ADvalor         2   21[COMRAM] unsigned int 
  2579 ;; Return value:  Size  Location     Type
  2580 ;;                  2   18[COMRAM] unsigned int 
  2581 ;; Registers used:
  2582 ;;		wreg, status,2, status,0
  2583 ;; Tracked objects:
  2584 ;;		On entry : 0/0
  2585 ;;		On exit  : 0/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2588 ;;      Params:         2       0       0       0       0       0       0       0       0
  2589 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2590 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2591 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2592 ;;Total ram usage:        5 bytes
  2593 ;; Hardware stack levels used:    1
  2594 ;; Hardware stack levels required when called:    2
  2595 ;; This function calls:
  2596 ;;		Nothing
  2597 ;; This function is called by:
  2598 ;;		_calibrates_sensors
  2599 ;;		_read_sensorns
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text11
  2604  000C64                     __ptext11:
  2605                           	opt stack 0
  2606  000C64                     _valor_AD:
  2607                           	opt stack 27
  2608                           
  2609                           ;incstack = 0
  2610                           ;valor_AD@chanel stored from wreg
  2611  000C64  6E15               	movwf	valor_AD@chanel,c
  2612                           
  2613                           ;conversorAD.c: 61: unsigned int ADvalor = 0;
  2614  000C66  0E00               	movlw	0
  2615  000C68  6E17               	movwf	valor_AD@ADvalor+1,c
  2616  000C6A  0E00               	movlw	0
  2617  000C6C  6E16               	movwf	valor_AD@ADvalor,c
  2618                           
  2619                           ;conversorAD.c: 63: chanel <<= 2;
  2620  000C6E  90D8               	bcf	status,0,c
  2621  000C70  3615               	rlcf	valor_AD@chanel,f,c
  2622  000C72  90D8               	bcf	status,0,c
  2623  000C74  3615               	rlcf	valor_AD@chanel,f,c
  2624                           
  2625                           ;conversorAD.c: 64: chanel &= 0b00111100;
  2626  000C76  0E3C               	movlw	60
  2627  000C78  1615               	andwf	valor_AD@chanel,f,c
  2628                           
  2629                           ;conversorAD.c: 65: ADCON0 &= 0b11000011;
  2630  000C7A  0EC3               	movlw	195
  2631  000C7C  16C2               	andwf	4034,f,c	;volatile
  2632                           
  2633                           ;conversorAD.c: 66: ADCON0 |= chanel;
  2634  000C7E  5015               	movf	valor_AD@chanel,w,c
  2635  000C80  12C2               	iorwf	4034,f,c	;volatile
  2636                           
  2637                           ;conversorAD.c: 68: ADON = 1;
  2638  000C82  80C2               	bsf	4034,0,c	;volatile
  2639                           
  2640                           ;conversorAD.c: 70: GO = 1;
  2641  000C84  82C2               	bsf	4034,1,c	;volatile
  2642  000C86                     l125:
  2643  000C86  B2C2               	btfsc	4034,1,c	;volatile
  2644  000C88  D7FE               	goto	l125
  2645                           
  2646                           ;conversorAD.c: 74: ADvalor = ADRESH;
  2647  000C8A  CFC4 F016          	movff	4036,valor_AD@ADvalor	;volatile
  2648  000C8E  6A17               	clrf	valor_AD@ADvalor+1,c
  2649                           
  2650                           ;conversorAD.c: 75: ADvalor <<= 8;
  2651  000C90  5016               	movf	valor_AD@ADvalor,w,c
  2652  000C92  6E17               	movwf	valor_AD@ADvalor+1,c
  2653  000C94  6A16               	clrf	valor_AD@ADvalor,c
  2654                           
  2655                           ;conversorAD.c: 76: ADvalor += ADRESL;
  2656  000C96  50C3               	movf	4035,w,c	;volatile
  2657  000C98  2616               	addwf	valor_AD@ADvalor,f,c
  2658  000C9A  0E00               	movlw	0
  2659  000C9C  2217               	addwfc	valor_AD@ADvalor+1,f,c
  2660                           
  2661                           ;conversorAD.c: 78: ADON = 0;
  2662  000C9E  90C2               	bcf	4034,0,c	;volatile
  2663                           
  2664                           ;conversorAD.c: 80: return ADvalor;
  2665  000CA0  C016  F013         	movff	valor_AD@ADvalor,?_valor_AD
  2666  000CA4  C017  F014         	movff	valor_AD@ADvalor+1,?_valor_AD+1
  2667  000CA8  0012               	return	
  2668  000CAA                     __end_of_valor_AD:
  2669                           	opt stack 0
  2670                           tblptru	equ	0xFF8
  2671                           tblptrh	equ	0xFF7
  2672                           tblptrl	equ	0xFF6
  2673                           tablat	equ	0xFF5
  2674                           prodh	equ	0xFF4
  2675                           prodl	equ	0xFF3
  2676                           postinc0	equ	0xFEE
  2677                           wreg	equ	0xFE8
  2678                           indf1	equ	0xFE7
  2679                           postinc1	equ	0xFE6
  2680                           postdec1	equ	0xFE5
  2681                           fsr1h	equ	0xFE2
  2682                           fsr1l	equ	0xFE1
  2683                           indf2	equ	0xFDF
  2684                           postinc2	equ	0xFDE
  2685                           postdec2	equ	0xFDD
  2686                           fsr2h	equ	0xFDA
  2687                           fsr2l	equ	0xFD9
  2688                           status	equ	0xFD8
  2689                           
  2690 ;; *************** function ___lwmod *****************
  2691 ;; Defined at:
  2692 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;  dividend        2   25[COMRAM] unsigned int 
  2695 ;;  divisor         2   27[COMRAM] unsigned int 
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;  counter         1   29[COMRAM] unsigned char 
  2698 ;; Return value:  Size  Location     Type
  2699 ;;                  2   25[COMRAM] unsigned int 
  2700 ;; Registers used:
  2701 ;;		wreg, status,2, status,0
  2702 ;; Tracked objects:
  2703 ;;		On entry : 0/0
  2704 ;;		On exit  : 0/0
  2705 ;;		Unchanged: 0/0
  2706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2707 ;;      Params:         4       0       0       0       0       0       0       0       0
  2708 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2709 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2710 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2711 ;;Total ram usage:        5 bytes
  2712 ;; Hardware stack levels used:    1
  2713 ;; Hardware stack levels required when called:    2
  2714 ;; This function calls:
  2715 ;;		Nothing
  2716 ;; This function is called by:
  2717 ;;		_main
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           	psect	text12
  2722  000CEC                     __ptext12:
  2723                           	opt stack 0
  2724  000CEC                     ___lwmod:
  2725                           	opt stack 28
  2726                           
  2727                           ;incstack = 0
  2728  000CEC  501C               	movf	___lwmod@divisor,w,c
  2729  000CEE  101D               	iorwf	___lwmod@divisor+1,w,c
  2730  000CF0  B4D8               	btfsc	status,2,c
  2731  000CF2  D018               	goto	l776
  2732  000CF4  0E01               	movlw	1
  2733  000CF6  6E1E               	movwf	___lwmod@counter,c
  2734  000CF8  D004               	goto	l2493
  2735  000CFA                     l2491:
  2736  000CFA  90D8               	bcf	status,0,c
  2737  000CFC  361C               	rlcf	___lwmod@divisor,f,c
  2738  000CFE  361D               	rlcf	___lwmod@divisor+1,f,c
  2739  000D00  2A1E               	incf	___lwmod@counter,f,c
  2740  000D02                     l2493:
  2741  000D02  AE1D               	btfss	___lwmod@divisor+1,7,c
  2742  000D04  D7FA               	goto	l2491
  2743  000D06                     l2495:
  2744  000D06  501C               	movf	___lwmod@divisor,w,c
  2745  000D08  5C1A               	subwf	___lwmod@dividend,w,c
  2746  000D0A  501D               	movf	___lwmod@divisor+1,w,c
  2747  000D0C  581B               	subwfb	___lwmod@dividend+1,w,c
  2748  000D0E  A0D8               	btfss	status,0,c
  2749  000D10  D004               	goto	l2499
  2750  000D12  501C               	movf	___lwmod@divisor,w,c
  2751  000D14  5E1A               	subwf	___lwmod@dividend,f,c
  2752  000D16  501D               	movf	___lwmod@divisor+1,w,c
  2753  000D18  5A1B               	subwfb	___lwmod@dividend+1,f,c
  2754  000D1A                     l2499:
  2755  000D1A  90D8               	bcf	status,0,c
  2756  000D1C  321D               	rrcf	___lwmod@divisor+1,f,c
  2757  000D1E  321C               	rrcf	___lwmod@divisor,f,c
  2758  000D20  2E1E               	decfsz	___lwmod@counter,f,c
  2759  000D22  D7F1               	goto	l2495
  2760  000D24                     l776:
  2761  000D24  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
  2762  000D28  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
  2763  000D2C  0012               	return		;funcret
  2764  000D2E                     __end_of___lwmod:
  2765                           	opt stack 0
  2766                           tblptru	equ	0xFF8
  2767                           tblptrh	equ	0xFF7
  2768                           tblptrl	equ	0xFF6
  2769                           tablat	equ	0xFF5
  2770                           prodh	equ	0xFF4
  2771                           prodl	equ	0xFF3
  2772                           postinc0	equ	0xFEE
  2773                           wreg	equ	0xFE8
  2774                           indf1	equ	0xFE7
  2775                           postinc1	equ	0xFE6
  2776                           postdec1	equ	0xFE5
  2777                           fsr1h	equ	0xFE2
  2778                           fsr1l	equ	0xFE1
  2779                           indf2	equ	0xFDF
  2780                           postinc2	equ	0xFDE
  2781                           postdec2	equ	0xFDD
  2782                           fsr2h	equ	0xFDA
  2783                           fsr2l	equ	0xFD9
  2784                           status	equ	0xFD8
  2785                           
  2786 ;; *************** function _DonPimpolhoBoard_init *****************
  2787 ;; Defined at:
  2788 ;;		line 73 in file "DonPimpolhoBoard.c"
  2789 ;; Parameters:    Size  Location     Type
  2790 ;;		None
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;		None
  2793 ;; Return value:  Size  Location     Type
  2794 ;;		None               void
  2795 ;; Registers used:
  2796 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2802 ;;      Params:         0       0       0       0       0       0       0       0       0
  2803 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2804 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2805 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2806 ;;Total ram usage:        0 bytes
  2807 ;; Hardware stack levels used:    1
  2808 ;; Hardware stack levels required when called:    3
  2809 ;; This function calls:
  2810 ;;		_PWMtimer0_48MHzCLK_config
  2811 ;;		_PWMtimer0_B_pin
  2812 ;;		_PWMtimer0_on
  2813 ;;		_PWMtimer2_48MHzCLK_config
  2814 ;;		_PWMtimer2_B_pin
  2815 ;;		_PWMtimer2_on
  2816 ;;		_conversorAD_config
  2817 ;; This function is called by:
  2818 ;;		_main
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	text13
  2823  000BBC                     __ptext13:
  2824                           	opt stack 0
  2825  000BBC                     _DonPimpolhoBoard_init:
  2826                           	opt stack 27
  2827                           
  2828                           ;DonPimpolhoBoard.c: 75: conversorAD_config(1,1,10);
  2829                           
  2830                           ;incstack = 0
  2831  000BBC  0E01               	movlw	1
  2832  000BBE  6E13               	movwf	conversorAD_config@neg,c
  2833  000BC0  0E0A               	movlw	10
  2834  000BC2  6E14               	movwf	conversorAD_config@chanel,c
  2835  000BC4  0E01               	movlw	1
  2836  000BC6  ECE2  F002         	call	_conversorAD_config
  2837                           
  2838                           ;DonPimpolhoBoard.c: 77: PWMtimer0_48MHzCLK_config(1);
  2839  000BCA  0E01               	movlw	1
  2840  000BCC  ECEE  F006         	call	_PWMtimer0_48MHzCLK_config
  2841                           
  2842                           ;DonPimpolhoBoard.c: 78: PWMtimer0_B_pin(&PORTD,&TRISD,2);
  2843  000BD0  0E83               	movlw	131
  2844  000BD2  6E13               	movwf	PWMtimer0_B_pin@port,c
  2845  000BD4  0E0F               	movlw	15
  2846  000BD6  6E14               	movwf	PWMtimer0_B_pin@port+1,c
  2847  000BD8  0E95               	movlw	149
  2848  000BDA  6E15               	movwf	PWMtimer0_B_pin@tris,c
  2849  000BDC  0E0F               	movlw	15
  2850  000BDE  6E16               	movwf	PWMtimer0_B_pin@tris+1,c
  2851  000BE0  0E02               	movlw	2
  2852  000BE2  6E17               	movwf	PWMtimer0_B_pin@pino,c
  2853  000BE4  ECB7  F006         	call	_PWMtimer0_B_pin	;wreg free
  2854                           
  2855                           ;DonPimpolhoBoard.c: 79: PWMtimer0_on();
  2856  000BE8  EC48  F007         	call	_PWMtimer0_on	;wreg free
  2857                           
  2858                           ;DonPimpolhoBoard.c: 81: PWMtimer2_48MHzCLK_config(1);
  2859  000BEC  0E01               	movlw	1
  2860  000BEE  EC16  F007         	call	_PWMtimer2_48MHzCLK_config
  2861                           
  2862                           ;DonPimpolhoBoard.c: 82: PWMtimer2_B_pin(&PORTD,&TRISD,0);
  2863  000BF2  0E83               	movlw	131
  2864  000BF4  6E13               	movwf	PWMtimer2_B_pin@port,c
  2865  000BF6  0E0F               	movlw	15
  2866  000BF8  6E14               	movwf	PWMtimer2_B_pin@port+1,c
  2867  000BFA  0E95               	movlw	149
  2868  000BFC  6E15               	movwf	PWMtimer2_B_pin@tris,c
  2869  000BFE  0E0F               	movlw	15
  2870  000C00  6E16               	movwf	PWMtimer2_B_pin@tris+1,c
  2871  000C02  0E00               	movlw	0
  2872  000C04  6E17               	movwf	PWMtimer2_B_pin@pino,c
  2873  000C06  EC97  F006         	call	_PWMtimer2_B_pin	;wreg free
  2874                           
  2875                           ;DonPimpolhoBoard.c: 83: PWMtimer2_on();
  2876  000C0A  EC44  F007         	call	_PWMtimer2_on	;wreg free
  2877                           
  2878                           ;DonPimpolhoBoard.c: 85: GIE = 1;
  2879  000C0E  8EF2               	bsf	intcon,7,c	;volatile
  2880  000C10  0012               	return		;funcret
  2881  000C12                     __end_of_DonPimpolhoBoard_init:
  2882                           	opt stack 0
  2883                           tblptru	equ	0xFF8
  2884                           tblptrh	equ	0xFF7
  2885                           tblptrl	equ	0xFF6
  2886                           tablat	equ	0xFF5
  2887                           prodh	equ	0xFF4
  2888                           prodl	equ	0xFF3
  2889                           intcon	equ	0xFF2
  2890                           postinc0	equ	0xFEE
  2891                           wreg	equ	0xFE8
  2892                           indf1	equ	0xFE7
  2893                           postinc1	equ	0xFE6
  2894                           postdec1	equ	0xFE5
  2895                           fsr1h	equ	0xFE2
  2896                           fsr1l	equ	0xFE1
  2897                           indf2	equ	0xFDF
  2898                           postinc2	equ	0xFDE
  2899                           postdec2	equ	0xFDD
  2900                           fsr2h	equ	0xFDA
  2901                           fsr2l	equ	0xFD9
  2902                           status	equ	0xFD8
  2903                           
  2904 ;; *************** function _conversorAD_config *****************
  2905 ;; Defined at:
  2906 ;;		line 13 in file "conversorAD.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;  pos             1    wreg     unsigned char 
  2909 ;;  neg             1   18[COMRAM] unsigned char 
  2910 ;;  chanel          1   19[COMRAM] unsigned char 
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;  pos             1   13[BANK0 ] unsigned char 
  2913 ;;  port_an        26   14[BANK0 ] PTR unsigned char [13]
  2914 ;;		 -> TRISB(1), TRISE(1), TRISA(1), 
  2915 ;;  port_mask      13    0[BANK0 ] unsigned char [13]
  2916 ;;  i               1   40[BANK0 ] unsigned char 
  2917 ;; Return value:  Size  Location     Type
  2918 ;;		None               void
  2919 ;; Registers used:
  2920 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2926 ;;      Params:         2       0       0       0       0       0       0       0       0
  2927 ;;      Locals:         0      41       0       0       0       0       0       0       0
  2928 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2929 ;;      Totals:         5      41       0       0       0       0       0       0       0
  2930 ;;Total ram usage:       46 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    2
  2933 ;; This function calls:
  2934 ;;		Nothing
  2935 ;; This function is called by:
  2936 ;;		_DonPimpolhoBoard_init
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           	psect	text14
  2941  0005C4                     __ptext14:
  2942                           	opt stack 0
  2943  0005C4                     _conversorAD_config:
  2944                           	opt stack 27
  2945                           
  2946                           ;incstack = 0
  2947                           ;conversorAD_config@pos stored from wreg
  2948  0005C4  0100               	movlb	0	; () banked
  2949  0005C6  6FA9               	movwf	conversorAD_config@pos& (0+255),b
  2950                           
  2951                           ;conversorAD.c: 15: char *port_an[13];
  2952                           ;conversorAD.c: 16: char port_mask[13] = {0x01,0x02,0x04,0x08,0x20,0x01,0x02,0x04,0x04,0
      +                          x08,0x02,0x10,0x01};
  2953  0005C8  EE20  F0F1         	lfsr	2,conversorAD_config@F4451
  2954  0005CC  EE10  F09C         	lfsr	1,conversorAD_config@port_mask
  2955  0005D0  0E0C               	movlw	12
  2956  0005D2                     u1291:
  2957  0005D2  CFDB FFE3          	movff	plusw2,plusw1
  2958  0005D6  06E8               	decf	wreg,f,c
  2959  0005D8  E2FC               	bc	u1291
  2960                           
  2961                           ;conversorAD.c: 17: char i;
  2962                           ;conversorAD.c: 19: port_an[0] = &TRISA; port_an[1] = &TRISA; port_an[2] = &TRISA; port_
      +                          an[3] = &TRISA;
  2963  0005DA  0E92               	movlw	146
  2964  0005DC  0100               	movlb	0	; () banked
  2965  0005DE  6FAA               	movwf	conversorAD_config@port_an& (0+255),b
  2966  0005E0  0E0F               	movlw	15
  2967  0005E2  0100               	movlb	0	; () banked
  2968  0005E4  6FAB               	movwf	(conversorAD_config@port_an+1)& (0+255),b
  2969                           
  2970                           ; BSR set to: 0
  2971  0005E6  0E92               	movlw	146
  2972  0005E8  0100               	movlb	0	; () banked
  2973  0005EA  6FAC               	movwf	(conversorAD_config@port_an+2)& (0+255),b
  2974  0005EC  0E0F               	movlw	15
  2975  0005EE  0100               	movlb	0	; () banked
  2976  0005F0  6FAD               	movwf	(conversorAD_config@port_an+3)& (0+255),b
  2977                           
  2978                           ; BSR set to: 0
  2979  0005F2  0E92               	movlw	146
  2980  0005F4  0100               	movlb	0	; () banked
  2981  0005F6  6FAE               	movwf	(conversorAD_config@port_an+4)& (0+255),b
  2982  0005F8  0E0F               	movlw	15
  2983  0005FA  0100               	movlb	0	; () banked
  2984  0005FC  6FAF               	movwf	(conversorAD_config@port_an+5)& (0+255),b
  2985                           
  2986                           ; BSR set to: 0
  2987  0005FE  0E92               	movlw	146
  2988  000600  0100               	movlb	0	; () banked
  2989  000602  6FB0               	movwf	(conversorAD_config@port_an+6)& (0+255),b
  2990  000604  0E0F               	movlw	15
  2991  000606  0100               	movlb	0	; () banked
  2992  000608  6FB1               	movwf	(conversorAD_config@port_an+7)& (0+255),b
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;conversorAD.c: 20: port_an[4] = &TRISA; port_an[5] = &TRISE; port_an[6] = &TRISE; port_
      +                          an[7] = &TRISE;
  2996  00060A  0E92               	movlw	146
  2997  00060C  0100               	movlb	0	; () banked
  2998  00060E  6FB2               	movwf	(conversorAD_config@port_an+8)& (0+255),b
  2999  000610  0E0F               	movlw	15
  3000  000612  0100               	movlb	0	; () banked
  3001  000614  6FB3               	movwf	(conversorAD_config@port_an+9)& (0+255),b
  3002                           
  3003                           ; BSR set to: 0
  3004  000616  0E96               	movlw	150
  3005  000618  0100               	movlb	0	; () banked
  3006  00061A  6FB4               	movwf	(conversorAD_config@port_an+10)& (0+255),b
  3007  00061C  0E0F               	movlw	15
  3008  00061E  0100               	movlb	0	; () banked
  3009  000620  6FB5               	movwf	(conversorAD_config@port_an+11)& (0+255),b
  3010                           
  3011                           ; BSR set to: 0
  3012  000622  0E96               	movlw	150
  3013  000624  0100               	movlb	0	; () banked
  3014  000626  6FB6               	movwf	(conversorAD_config@port_an+12)& (0+255),b
  3015  000628  0E0F               	movlw	15
  3016  00062A  0100               	movlb	0	; () banked
  3017  00062C  6FB7               	movwf	(conversorAD_config@port_an+13)& (0+255),b
  3018                           
  3019                           ; BSR set to: 0
  3020  00062E  0E96               	movlw	150
  3021  000630  0100               	movlb	0	; () banked
  3022  000632  6FB8               	movwf	(conversorAD_config@port_an+14)& (0+255),b
  3023  000634  0E0F               	movlw	15
  3024  000636  0100               	movlb	0	; () banked
  3025  000638  6FB9               	movwf	(conversorAD_config@port_an+15)& (0+255),b
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;conversorAD.c: 21: port_an[8] = &TRISB; port_an[9] = &TRISB; port_an[10] = &TRISB; port
      +                          _an[11] = &TRISB;
  3029  00063A  0E93               	movlw	147
  3030  00063C  0100               	movlb	0	; () banked
  3031  00063E  6FBA               	movwf	(conversorAD_config@port_an+16)& (0+255),b
  3032  000640  0E0F               	movlw	15
  3033  000642  0100               	movlb	0	; () banked
  3034  000644  6FBB               	movwf	(conversorAD_config@port_an+17)& (0+255),b
  3035                           
  3036                           ; BSR set to: 0
  3037  000646  0E93               	movlw	147
  3038  000648  0100               	movlb	0	; () banked
  3039  00064A  6FBC               	movwf	(conversorAD_config@port_an+18)& (0+255),b
  3040  00064C  0E0F               	movlw	15
  3041  00064E  0100               	movlb	0	; () banked
  3042  000650  6FBD               	movwf	(conversorAD_config@port_an+19)& (0+255),b
  3043                           
  3044                           ; BSR set to: 0
  3045  000652  0E93               	movlw	147
  3046  000654  0100               	movlb	0	; () banked
  3047  000656  6FBE               	movwf	(conversorAD_config@port_an+20)& (0+255),b
  3048  000658  0E0F               	movlw	15
  3049  00065A  0100               	movlb	0	; () banked
  3050  00065C  6FBF               	movwf	(conversorAD_config@port_an+21)& (0+255),b
  3051                           
  3052                           ; BSR set to: 0
  3053  00065E  0E93               	movlw	147
  3054  000660  0100               	movlb	0	; () banked
  3055  000662  6FC0               	movwf	(conversorAD_config@port_an+22)& (0+255),b
  3056  000664  0E0F               	movlw	15
  3057  000666  0100               	movlb	0	; () banked
  3058  000668  6FC1               	movwf	(conversorAD_config@port_an+23)& (0+255),b
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;conversorAD.c: 22: port_an[12] = &TRISB;
  3062  00066A  0E93               	movlw	147
  3063  00066C  0100               	movlb	0	; () banked
  3064  00066E  6FC2               	movwf	(conversorAD_config@port_an+24)& (0+255),b
  3065  000670  0E0F               	movlw	15
  3066  000672  0100               	movlb	0	; () banked
  3067  000674  6FC3               	movwf	(conversorAD_config@port_an+25)& (0+255),b
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;conversorAD.c: 25: if(pos){
  3071  000676  0100               	movlb	0	; () banked
  3072  000678  51A9               	movf	conversorAD_config@pos& (0+255),w,b
  3073  00067A  0100               	movlb	0	; () banked
  3074  00067C  B4D8               	btfsc	status,2,c
  3075  00067E  D002               	goto	l2113
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;conversorAD.c: 26: ADCON1 &= 0b11101111;
  3079  000680  98C1               	bcf	4033,4,c	;volatile
  3080                           
  3081                           ;conversorAD.c: 27: }else{
  3082  000682  D001               	goto	l2115
  3083  000684                     l2113:
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;conversorAD.c: 28: ADCON1 |= 0b00010000;
  3087  000684  88C1               	bsf	4033,4,c	;volatile
  3088  000686                     l2115:
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;conversorAD.c: 29: }
  3092                           ;conversorAD.c: 31: if(neg){
  3093  000686  5013               	movf	conversorAD_config@neg,w,c
  3094  000688  B4D8               	btfsc	status,2,c
  3095  00068A  D002               	goto	l2119
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;conversorAD.c: 32: ADCON1 &= 0b11011111;
  3099  00068C  9AC1               	bcf	4033,5,c	;volatile
  3100                           
  3101                           ;conversorAD.c: 33: }else{
  3102  00068E  D001               	goto	l2121
  3103  000690                     l2119:
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;conversorAD.c: 34: ADCON1 |= 0b00100000;
  3107  000690  8AC1               	bsf	4033,5,c	;volatile
  3108  000692                     l2121:
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;conversorAD.c: 35: }
  3112                           ;conversorAD.c: 37: for(i=0;i<=chanel;i++){
  3113  000692  0E00               	movlw	0
  3114  000694  0100               	movlb	0	; () banked
  3115  000696  6FC4               	movwf	conversorAD_config@i& (0+255),b
  3116  000698  D020               	goto	l2127
  3117  00069A                     l2123:
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;conversorAD.c: 38: *port_an[i] |= port_mask[i];
  3121  00069A  0100               	movlb	0	; () banked
  3122  00069C  51C4               	movf	conversorAD_config@i& (0+255),w,b
  3123  00069E  0D01               	mullw	1
  3124  0006A0  0E9C               	movlw	low conversorAD_config@port_mask
  3125  0006A2  24F3               	addwf	prodl,w,c
  3126  0006A4  6ED9               	movwf	fsr2l,c
  3127  0006A6  0E00               	movlw	high conversorAD_config@port_mask
  3128  0006A8  20F4               	addwfc	prodh,w,c
  3129  0006AA  6EDA               	movwf	fsr2h,c
  3130  0006AC  50DF               	movf	indf2,w,c
  3131  0006AE  6E15               	movwf	??_conversorAD_config& (0+255),c
  3132  0006B0  0100               	movlb	0	; () banked
  3133  0006B2  51C4               	movf	conversorAD_config@i& (0+255),w,b
  3134  0006B4  0D02               	mullw	2
  3135  0006B6  0EAA               	movlw	low conversorAD_config@port_an
  3136  0006B8  24F3               	addwf	prodl,w,c
  3137  0006BA  6ED9               	movwf	fsr2l,c
  3138  0006BC  0E00               	movlw	high conversorAD_config@port_an
  3139  0006BE  20F4               	addwfc	prodh,w,c
  3140  0006C0  6EDA               	movwf	fsr2h,c
  3141  0006C2  CFDE F016          	movff	postinc2,??_conversorAD_config+1
  3142  0006C6  CFDD F017          	movff	postdec2,??_conversorAD_config+2
  3143  0006CA  C016  FFD9         	movff	??_conversorAD_config+1,fsr2l
  3144  0006CE  C017  FFDA         	movff	??_conversorAD_config+2,fsr2h
  3145  0006D2  5015               	movf	??_conversorAD_config,w,c
  3146  0006D4  12DF               	iorwf	indf2,f,c
  3147                           
  3148                           ; BSR set to: 0
  3149  0006D6  0100               	movlb	0	; () banked
  3150  0006D8  2BC4               	incf	conversorAD_config@i& (0+255),f,b
  3151  0006DA                     l2127:
  3152                           
  3153                           ; BSR set to: 0
  3154  0006DA  0100               	movlb	0	; () banked
  3155  0006DC  51C4               	movf	conversorAD_config@i& (0+255),w,b
  3156  0006DE  5C14               	subwf	conversorAD_config@chanel,w,c
  3157  0006E0  B0D8               	btfsc	status,0,c
  3158  0006E2  D7DB               	goto	l2123
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;conversorAD.c: 39: }
  3162                           ;conversorAD.c: 41: chanel = ~chanel - 1;
  3163                           
  3164                           ; BSR set to: 0
  3165  0006E4  5014               	movf	conversorAD_config@chanel,w,c
  3166  0006E6  0AFF               	xorlw	255
  3167  0006E8  6E15               	movwf	??_conversorAD_config& (0+255),c
  3168  0006EA  0415               	decf	??_conversorAD_config,w,c
  3169  0006EC  6E14               	movwf	conversorAD_config@chanel,c
  3170                           
  3171                           ;conversorAD.c: 42: chanel &= 0b00001111;
  3172  0006EE  0E0F               	movlw	15
  3173  0006F0  1614               	andwf	conversorAD_config@chanel,f,c
  3174                           
  3175                           ;conversorAD.c: 44: ADCON1 &= 0b11110000;
  3176  0006F2  0EF0               	movlw	240
  3177  0006F4  16C1               	andwf	4033,f,c	;volatile
  3178                           
  3179                           ;conversorAD.c: 45: ADCON1 = (ADCON1|chanel);
  3180  0006F6  50C1               	movf	4033,w,c	;volatile
  3181  0006F8  1014               	iorwf	conversorAD_config@chanel,w,c
  3182  0006FA  6EC1               	movwf	4033,c	;volatile
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;conversorAD.c: 47: ADFM = 1;
  3186  0006FC  8EC0               	bsf	4032,7,c	;volatile
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;conversorAD.c: 49: ADCS2 = 0;
  3190  0006FE  94C0               	bcf	4032,2,c	;volatile
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;conversorAD.c: 50: ADCS1 = 1;
  3194  000700  82C0               	bsf	4032,1,c	;volatile
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;conversorAD.c: 51: ADCS0 = 0;
  3198  000702  90C0               	bcf	4032,0,c	;volatile
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;conversorAD.c: 53: ACQT2 = 1;
  3202  000704  8AC0               	bsf	4032,5,c	;volatile
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;conversorAD.c: 54: ACQT1 = 0;
  3206  000706  98C0               	bcf	4032,4,c	;volatile
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;conversorAD.c: 55: ACQT0 = 1;
  3210  000708  86C0               	bsf	4032,3,c	;volatile
  3211                           
  3212                           ; BSR set to: 0
  3213  00070A  0012               	return		;funcret
  3214  00070C                     __end_of_conversorAD_config:
  3215                           	opt stack 0
  3216                           tblptru	equ	0xFF8
  3217                           tblptrh	equ	0xFF7
  3218                           tblptrl	equ	0xFF6
  3219                           tablat	equ	0xFF5
  3220                           prodh	equ	0xFF4
  3221                           prodl	equ	0xFF3
  3222                           intcon	equ	0xFF2
  3223                           postinc0	equ	0xFEE
  3224                           wreg	equ	0xFE8
  3225                           indf1	equ	0xFE7
  3226                           postinc1	equ	0xFE6
  3227                           postdec1	equ	0xFE5
  3228                           plusw1	equ	0xFE3
  3229                           fsr1h	equ	0xFE2
  3230                           fsr1l	equ	0xFE1
  3231                           indf2	equ	0xFDF
  3232                           postinc2	equ	0xFDE
  3233                           postdec2	equ	0xFDD
  3234                           plusw2	equ	0xFDB
  3235                           fsr2h	equ	0xFDA
  3236                           fsr2l	equ	0xFD9
  3237                           status	equ	0xFD8
  3238                           
  3239 ;; *************** function _PWMtimer2_on *****************
  3240 ;; Defined at:
  3241 ;;		line 44 in file "PMW_timer2.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;		None
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;		None
  3246 ;; Return value:  Size  Location     Type
  3247 ;;		None               void
  3248 ;; Registers used:
  3249 ;;		None
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3255 ;;      Params:         0       0       0       0       0       0       0       0       0
  3256 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3257 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3258 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3259 ;;Total ram usage:        0 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    2
  3262 ;; This function calls:
  3263 ;;		Nothing
  3264 ;; This function is called by:
  3265 ;;		_DonPimpolhoBoard_init
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           	psect	text15
  3270  000E88                     __ptext15:
  3271                           	opt stack 0
  3272  000E88                     _PWMtimer2_on:
  3273                           	opt stack 27
  3274                           
  3275                           ;PMW_timer2.c: 46: TMR2IE = 1;
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;incstack = 0
  3279  000E88  829D               	bsf	3997,1,c	;volatile
  3280                           
  3281                           ;PMW_timer2.c: 47: TMR2ON = 1;
  3282  000E8A  84CA               	bsf	4042,2,c	;volatile
  3283                           
  3284                           ;PMW_timer2.c: 48: TMR2IF = 0;
  3285  000E8C  929E               	bcf	3998,1,c	;volatile
  3286  000E8E  0012               	return		;funcret
  3287  000E90                     __end_of_PWMtimer2_on:
  3288                           	opt stack 0
  3289                           tblptru	equ	0xFF8
  3290                           tblptrh	equ	0xFF7
  3291                           tblptrl	equ	0xFF6
  3292                           tablat	equ	0xFF5
  3293                           prodh	equ	0xFF4
  3294                           prodl	equ	0xFF3
  3295                           intcon	equ	0xFF2
  3296                           postinc0	equ	0xFEE
  3297                           wreg	equ	0xFE8
  3298                           indf1	equ	0xFE7
  3299                           postinc1	equ	0xFE6
  3300                           postdec1	equ	0xFE5
  3301                           plusw1	equ	0xFE3
  3302                           fsr1h	equ	0xFE2
  3303                           fsr1l	equ	0xFE1
  3304                           indf2	equ	0xFDF
  3305                           postinc2	equ	0xFDE
  3306                           postdec2	equ	0xFDD
  3307                           plusw2	equ	0xFDB
  3308                           fsr2h	equ	0xFDA
  3309                           fsr2l	equ	0xFD9
  3310                           status	equ	0xFD8
  3311                           
  3312 ;; *************** function _PWMtimer2_B_pin *****************
  3313 ;; Defined at:
  3314 ;;		line 100 in file "PMW_timer2.c"
  3315 ;; Parameters:    Size  Location     Type
  3316 ;;  port            2   18[COMRAM] PTR unsigned char 
  3317 ;;		 -> PORTD(1), 
  3318 ;;  tris            2   20[COMRAM] PTR unsigned char 
  3319 ;;		 -> TRISD(1), 
  3320 ;;  pino            1   22[COMRAM] unsigned char 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  tris_p          2   23[COMRAM] PTR unsigned char 
  3323 ;;		 -> TRISD(1), 
  3324 ;;  mask            1   26[COMRAM] unsigned char 
  3325 ;;  i               1   25[COMRAM] unsigned char 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;		None               void
  3328 ;; Registers used:
  3329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3335 ;;      Params:         5       0       0       0       0       0       0       0       0
  3336 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3337 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3338 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3339 ;;Total ram usage:        9 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    2
  3342 ;; This function calls:
  3343 ;;		Nothing
  3344 ;; This function is called by:
  3345 ;;		_DonPimpolhoBoard_init
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           	psect	text16
  3350  000D2E                     __ptext16:
  3351                           	opt stack 0
  3352  000D2E                     _PWMtimer2_B_pin:
  3353                           	opt stack 27
  3354                           
  3355                           ;PMW_timer2.c: 102: char *tris_p;
  3356                           ;PMW_timer2.c: 103: char mask = 1, i;
  3357                           
  3358                           ;incstack = 0
  3359  000D2E  0E01               	movlw	1
  3360  000D30  6E1B               	movwf	PWMtimer2_B_pin@mask,c
  3361                           
  3362                           ;PMW_timer2.c: 105: for (i = 0; i < pino; i++) {
  3363  000D32  0E00               	movlw	0
  3364  000D34  6E1A               	movwf	PWMtimer2_B_pin@i,c
  3365  000D36  D005               	goto	l2203
  3366  000D38                     l2199:
  3367                           
  3368                           ;PMW_timer2.c: 106: mask *= 2;
  3369  000D38  0E02               	movlw	2
  3370  000D3A  021B               	mulwf	PWMtimer2_B_pin@mask,c
  3371  000D3C  50F3               	movf	prodl,w,c
  3372  000D3E  6E1B               	movwf	PWMtimer2_B_pin@mask,c
  3373  000D40  2A1A               	incf	PWMtimer2_B_pin@i,f,c
  3374  000D42                     l2203:
  3375  000D42  5017               	movf	PWMtimer2_B_pin@pino,w,c
  3376  000D44  5C1A               	subwf	PWMtimer2_B_pin@i,w,c
  3377  000D46  A0D8               	btfss	status,0,c
  3378  000D48  D7F7               	goto	l2199
  3379                           
  3380                           ;PMW_timer2.c: 107: }
  3381                           ;PMW_timer2.c: 109: mask_B2 = mask;
  3382  000D4A  C01B  F041         	movff	PWMtimer2_B_pin@mask,_mask_B2
  3383                           
  3384                           ;PMW_timer2.c: 111: mask = ~mask;
  3385  000D4E  1E1B               	comf	PWMtimer2_B_pin@mask,f,c
  3386                           
  3387                           ;PMW_timer2.c: 113: portB_p = port;
  3388  000D50  C013  F036         	movff	PWMtimer2_B_pin@port,_portB_p
  3389  000D54  C014  F037         	movff	PWMtimer2_B_pin@port+1,_portB_p+1
  3390                           
  3391                           ;PMW_timer2.c: 114: tris_p = tris;
  3392  000D58  C015  F018         	movff	PWMtimer2_B_pin@tris,PWMtimer2_B_pin@tris_p
  3393  000D5C  C016  F019         	movff	PWMtimer2_B_pin@tris+1,PWMtimer2_B_pin@tris_p+1
  3394                           
  3395                           ;PMW_timer2.c: 116: *tris_p &= mask;
  3396  000D60  C018  FFD9         	movff	PWMtimer2_B_pin@tris_p,fsr2l
  3397  000D64  C019  FFDA         	movff	PWMtimer2_B_pin@tris_p+1,fsr2h
  3398  000D68  501B               	movf	PWMtimer2_B_pin@mask,w,c
  3399  000D6A  16DF               	andwf	indf2,f,c
  3400  000D6C  0012               	return		;funcret
  3401  000D6E                     __end_of_PWMtimer2_B_pin:
  3402                           	opt stack 0
  3403                           tblptru	equ	0xFF8
  3404                           tblptrh	equ	0xFF7
  3405                           tblptrl	equ	0xFF6
  3406                           tablat	equ	0xFF5
  3407                           prodh	equ	0xFF4
  3408                           prodl	equ	0xFF3
  3409                           intcon	equ	0xFF2
  3410                           postinc0	equ	0xFEE
  3411                           wreg	equ	0xFE8
  3412                           indf1	equ	0xFE7
  3413                           postinc1	equ	0xFE6
  3414                           postdec1	equ	0xFE5
  3415                           plusw1	equ	0xFE3
  3416                           fsr1h	equ	0xFE2
  3417                           fsr1l	equ	0xFE1
  3418                           indf2	equ	0xFDF
  3419                           postinc2	equ	0xFDE
  3420                           postdec2	equ	0xFDD
  3421                           plusw2	equ	0xFDB
  3422                           fsr2h	equ	0xFDA
  3423                           fsr2l	equ	0xFD9
  3424                           status	equ	0xFD8
  3425                           
  3426 ;; *************** function _PWMtimer2_48MHzCLK_config *****************
  3427 ;; Defined at:
  3428 ;;		line 29 in file "PMW_timer2.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;  priority        1    wreg     unsigned char 
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;  priority        1   18[COMRAM] unsigned char 
  3433 ;; Return value:  Size  Location     Type
  3434 ;;		None               void
  3435 ;; Registers used:
  3436 ;;		wreg, status,2, status,0
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3442 ;;      Params:         0       0       0       0       0       0       0       0       0
  3443 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3444 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3445 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3446 ;;Total ram usage:        1 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; Hardware stack levels required when called:    2
  3449 ;; This function calls:
  3450 ;;		Nothing
  3451 ;; This function is called by:
  3452 ;;		_DonPimpolhoBoard_init
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           	psect	text17
  3457  000E2C                     __ptext17:
  3458                           	opt stack 0
  3459  000E2C                     _PWMtimer2_48MHzCLK_config:
  3460                           	opt stack 27
  3461                           
  3462                           ;incstack = 0
  3463                           ;PWMtimer2_48MHzCLK_config@priority stored from wreg
  3464  000E2C  6E13               	movwf	PWMtimer2_48MHzCLK_config@priority,c
  3465                           
  3466                           ;PMW_timer2.c: 31: T2CON = 0b00010011;
  3467  000E2E  0E13               	movlw	19
  3468  000E30  6ECA               	movwf	4042,c	;volatile
  3469                           
  3470                           ;PMW_timer2.c: 33: if (priority == 0) {
  3471  000E32  5013               	movf	PWMtimer2_48MHzCLK_config@priority,w,c
  3472  000E34  B4D8               	btfsc	status,2,c
  3473  000E36  0012               	return	
  3474                           
  3475                           ;PMW_timer2.c: 34: } else if (priority == 1) {
  3476  000E38  0413               	decf	PWMtimer2_48MHzCLK_config@priority,w,c
  3477  000E3A  A4D8               	btfss	status,2,c
  3478  000E3C  D003               	goto	l2193
  3479                           
  3480                           ;PMW_timer2.c: 35: IPEN = 1;
  3481  000E3E  8ED0               	bsf	4048,7,c	;volatile
  3482                           
  3483                           ;PMW_timer2.c: 36: TMR2IP = 1;
  3484  000E40  829F               	bsf	3999,1,c	;volatile
  3485                           
  3486                           ;PMW_timer2.c: 37: } else if (priority == 2) {
  3487  000E42  0012               	return	
  3488  000E44                     l2193:
  3489  000E44  0E02               	movlw	2
  3490  000E46  1813               	xorwf	PWMtimer2_48MHzCLK_config@priority,w,c
  3491  000E48  A4D8               	btfss	status,2,c
  3492  000E4A  0012               	return	
  3493                           
  3494                           ;PMW_timer2.c: 38: IPEN = 1;
  3495  000E4C  8ED0               	bsf	4048,7,c	;volatile
  3496                           
  3497                           ;PMW_timer2.c: 39: TMR2IP = 0;
  3498  000E4E  929F               	bcf	3999,1,c	;volatile
  3499  000E50  0012               	return	
  3500  000E52                     __end_of_PWMtimer2_48MHzCLK_config:
  3501                           	opt stack 0
  3502                           tblptru	equ	0xFF8
  3503                           tblptrh	equ	0xFF7
  3504                           tblptrl	equ	0xFF6
  3505                           tablat	equ	0xFF5
  3506                           prodh	equ	0xFF4
  3507                           prodl	equ	0xFF3
  3508                           intcon	equ	0xFF2
  3509                           postinc0	equ	0xFEE
  3510                           wreg	equ	0xFE8
  3511                           indf1	equ	0xFE7
  3512                           postinc1	equ	0xFE6
  3513                           postdec1	equ	0xFE5
  3514                           plusw1	equ	0xFE3
  3515                           fsr1h	equ	0xFE2
  3516                           fsr1l	equ	0xFE1
  3517                           indf2	equ	0xFDF
  3518                           postinc2	equ	0xFDE
  3519                           postdec2	equ	0xFDD
  3520                           plusw2	equ	0xFDB
  3521                           fsr2h	equ	0xFDA
  3522                           fsr2l	equ	0xFD9
  3523                           status	equ	0xFD8
  3524                           
  3525 ;; *************** function _PWMtimer0_on *****************
  3526 ;; Defined at:
  3527 ;;		line 41 in file "PWM_timer0.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;		None
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;		None
  3532 ;; Return value:  Size  Location     Type
  3533 ;;		None               void
  3534 ;; Registers used:
  3535 ;;		None
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3541 ;;      Params:         0       0       0       0       0       0       0       0       0
  3542 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3543 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3544 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3545 ;;Total ram usage:        0 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; Hardware stack levels required when called:    2
  3548 ;; This function calls:
  3549 ;;		Nothing
  3550 ;; This function is called by:
  3551 ;;		_DonPimpolhoBoard_init
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           	psect	text18
  3556  000E90                     __ptext18:
  3557                           	opt stack 0
  3558  000E90                     _PWMtimer0_on:
  3559                           	opt stack 27
  3560                           
  3561                           ;PWM_timer0.c: 43: TMR0IE = 1;
  3562                           
  3563                           ;incstack = 0
  3564  000E90  8AF2               	bsf	intcon,5,c	;volatile
  3565                           
  3566                           ;PWM_timer0.c: 44: TMR0ON = 1;
  3567  000E92  8ED5               	bsf	4053,7,c	;volatile
  3568                           
  3569                           ;PWM_timer0.c: 45: TMR0IF = 0;
  3570  000E94  94F2               	bcf	intcon,2,c	;volatile
  3571  000E96  0012               	return		;funcret
  3572  000E98                     __end_of_PWMtimer0_on:
  3573                           	opt stack 0
  3574                           tblptru	equ	0xFF8
  3575                           tblptrh	equ	0xFF7
  3576                           tblptrl	equ	0xFF6
  3577                           tablat	equ	0xFF5
  3578                           prodh	equ	0xFF4
  3579                           prodl	equ	0xFF3
  3580                           intcon	equ	0xFF2
  3581                           postinc0	equ	0xFEE
  3582                           wreg	equ	0xFE8
  3583                           indf1	equ	0xFE7
  3584                           postinc1	equ	0xFE6
  3585                           postdec1	equ	0xFE5
  3586                           plusw1	equ	0xFE3
  3587                           fsr1h	equ	0xFE2
  3588                           fsr1l	equ	0xFE1
  3589                           indf2	equ	0xFDF
  3590                           postinc2	equ	0xFDE
  3591                           postdec2	equ	0xFDD
  3592                           plusw2	equ	0xFDB
  3593                           fsr2h	equ	0xFDA
  3594                           fsr2l	equ	0xFD9
  3595                           status	equ	0xFD8
  3596                           
  3597 ;; *************** function _PWMtimer0_B_pin *****************
  3598 ;; Defined at:
  3599 ;;		line 108 in file "PWM_timer0.c"
  3600 ;; Parameters:    Size  Location     Type
  3601 ;;  port            2   18[COMRAM] PTR unsigned char 
  3602 ;;		 -> PORTD(1), 
  3603 ;;  tris            2   20[COMRAM] PTR unsigned char 
  3604 ;;		 -> TRISD(1), 
  3605 ;;  pino            1   22[COMRAM] unsigned char 
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;  tris_p          2   23[COMRAM] PTR unsigned char 
  3608 ;;		 -> TRISD(1), 
  3609 ;;  mask            1   26[COMRAM] unsigned char 
  3610 ;;  i               1   25[COMRAM] unsigned char 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;		None               void
  3613 ;; Registers used:
  3614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3620 ;;      Params:         5       0       0       0       0       0       0       0       0
  3621 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3623 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3624 ;;Total ram usage:        9 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    2
  3627 ;; This function calls:
  3628 ;;		Nothing
  3629 ;; This function is called by:
  3630 ;;		_DonPimpolhoBoard_init
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text19
  3635  000D6E                     __ptext19:
  3636                           	opt stack 0
  3637  000D6E                     _PWMtimer0_B_pin:
  3638                           	opt stack 27
  3639                           
  3640                           ;PWM_timer0.c: 110: char *tris_p;
  3641                           ;PWM_timer0.c: 111: char mask = 1, i;
  3642                           
  3643                           ;incstack = 0
  3644  000D6E  0E01               	movlw	1
  3645  000D70  6E1B               	movwf	PWMtimer0_B_pin@mask,c
  3646                           
  3647                           ;PWM_timer0.c: 113: for (i = 0; i < pino; i++) {
  3648  000D72  0E00               	movlw	0
  3649  000D74  6E1A               	movwf	PWMtimer0_B_pin@i,c
  3650  000D76  D005               	goto	l2171
  3651  000D78                     l2167:
  3652                           
  3653                           ;PWM_timer0.c: 114: mask *= 2;
  3654  000D78  0E02               	movlw	2
  3655  000D7A  021B               	mulwf	PWMtimer0_B_pin@mask,c
  3656  000D7C  50F3               	movf	prodl,w,c
  3657  000D7E  6E1B               	movwf	PWMtimer0_B_pin@mask,c
  3658  000D80  2A1A               	incf	PWMtimer0_B_pin@i,f,c
  3659  000D82                     l2171:
  3660  000D82  5017               	movf	PWMtimer0_B_pin@pino,w,c
  3661  000D84  5C1A               	subwf	PWMtimer0_B_pin@i,w,c
  3662  000D86  A0D8               	btfss	status,0,c
  3663  000D88  D7F7               	goto	l2167
  3664                           
  3665                           ;PWM_timer0.c: 115: }
  3666                           ;PWM_timer0.c: 117: mask_B = mask;
  3667  000D8A  C01B  F040         	movff	PWMtimer0_B_pin@mask,_mask_B
  3668                           
  3669                           ;PWM_timer0.c: 119: mask = ~mask;
  3670  000D8E  1E1B               	comf	PWMtimer0_B_pin@mask,f,c
  3671                           
  3672                           ;PWM_timer0.c: 121: portB_p0 = port;
  3673  000D90  C013  F038         	movff	PWMtimer0_B_pin@port,_portB_p0
  3674  000D94  C014  F039         	movff	PWMtimer0_B_pin@port+1,_portB_p0+1
  3675                           
  3676                           ;PWM_timer0.c: 122: tris_p = tris;
  3677  000D98  C015  F018         	movff	PWMtimer0_B_pin@tris,PWMtimer0_B_pin@tris_p
  3678  000D9C  C016  F019         	movff	PWMtimer0_B_pin@tris+1,PWMtimer0_B_pin@tris_p+1
  3679                           
  3680                           ;PWM_timer0.c: 124: *tris_p &= mask;
  3681  000DA0  C018  FFD9         	movff	PWMtimer0_B_pin@tris_p,fsr2l
  3682  000DA4  C019  FFDA         	movff	PWMtimer0_B_pin@tris_p+1,fsr2h
  3683  000DA8  501B               	movf	PWMtimer0_B_pin@mask,w,c
  3684  000DAA  16DF               	andwf	indf2,f,c
  3685  000DAC  0012               	return		;funcret
  3686  000DAE                     __end_of_PWMtimer0_B_pin:
  3687                           	opt stack 0
  3688                           tblptru	equ	0xFF8
  3689                           tblptrh	equ	0xFF7
  3690                           tblptrl	equ	0xFF6
  3691                           tablat	equ	0xFF5
  3692                           prodh	equ	0xFF4
  3693                           prodl	equ	0xFF3
  3694                           intcon	equ	0xFF2
  3695                           postinc0	equ	0xFEE
  3696                           wreg	equ	0xFE8
  3697                           indf1	equ	0xFE7
  3698                           postinc1	equ	0xFE6
  3699                           postdec1	equ	0xFE5
  3700                           plusw1	equ	0xFE3
  3701                           fsr1h	equ	0xFE2
  3702                           fsr1l	equ	0xFE1
  3703                           indf2	equ	0xFDF
  3704                           postinc2	equ	0xFDE
  3705                           postdec2	equ	0xFDD
  3706                           plusw2	equ	0xFDB
  3707                           fsr2h	equ	0xFDA
  3708                           fsr2l	equ	0xFD9
  3709                           status	equ	0xFD8
  3710                           
  3711 ;; *************** function _PWMtimer0_48MHzCLK_config *****************
  3712 ;; Defined at:
  3713 ;;		line 22 in file "PWM_timer0.c"
  3714 ;; Parameters:    Size  Location     Type
  3715 ;;  priority        1    wreg     unsigned char 
  3716 ;; Auto vars:     Size  Location     Type
  3717 ;;  priority        1   18[COMRAM] unsigned char 
  3718 ;; Return value:  Size  Location     Type
  3719 ;;		None               void
  3720 ;; Registers used:
  3721 ;;		wreg, status,2, status,0
  3722 ;; Tracked objects:
  3723 ;;		On entry : 0/0
  3724 ;;		On exit  : 0/0
  3725 ;;		Unchanged: 0/0
  3726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3727 ;;      Params:         0       0       0       0       0       0       0       0       0
  3728 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3729 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3730 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3731 ;;Total ram usage:        1 bytes
  3732 ;; Hardware stack levels used:    1
  3733 ;; Hardware stack levels required when called:    2
  3734 ;; This function calls:
  3735 ;;		Nothing
  3736 ;; This function is called by:
  3737 ;;		_DonPimpolhoBoard_init
  3738 ;; This function uses a non-reentrant model
  3739 ;;
  3740                           
  3741                           	psect	text20
  3742  000DDC                     __ptext20:
  3743                           	opt stack 0
  3744  000DDC                     _PWMtimer0_48MHzCLK_config:
  3745                           	opt stack 27
  3746                           
  3747                           ;incstack = 0
  3748                           ;PWMtimer0_48MHzCLK_config@priority stored from wreg
  3749  000DDC  6E13               	movwf	PWMtimer0_48MHzCLK_config@priority,c
  3750                           
  3751                           ;PWM_timer0.c: 24: T0CON &= 0b10111111;
  3752  000DDE  9CD5               	bcf	4053,6,c	;volatile
  3753                           
  3754                           ;PWM_timer0.c: 25: T0CS = 0;
  3755  000DE0  9AD5               	bcf	4053,5,c	;volatile
  3756                           
  3757                           ;PWM_timer0.c: 26: T0SE = 0;
  3758  000DE2  98D5               	bcf	4053,4,c	;volatile
  3759                           
  3760                           ;PWM_timer0.c: 27: PSA = 1;
  3761  000DE4  86D5               	bsf	4053,3,c	;volatile
  3762                           
  3763                           ;PWM_timer0.c: 30: if (priority == 0) {
  3764  000DE6  5013               	movf	PWMtimer0_48MHzCLK_config@priority,w,c
  3765  000DE8  B4D8               	btfsc	status,2,c
  3766  000DEA  0012               	return	
  3767                           
  3768                           ;PWM_timer0.c: 31: } else if (priority == 1) {
  3769  000DEC  0413               	decf	PWMtimer0_48MHzCLK_config@priority,w,c
  3770  000DEE  A4D8               	btfss	status,2,c
  3771  000DF0  D003               	goto	l2161
  3772                           
  3773                           ;PWM_timer0.c: 32: IPEN = 1;
  3774  000DF2  8ED0               	bsf	4048,7,c	;volatile
  3775                           
  3776                           ;PWM_timer0.c: 33: TMR0IP = 1;
  3777  000DF4  84F1               	bsf	intcon2,2,c	;volatile
  3778                           
  3779                           ;PWM_timer0.c: 34: } else if (priority == 2) {
  3780  000DF6  0012               	return	
  3781  000DF8                     l2161:
  3782  000DF8  0E02               	movlw	2
  3783  000DFA  1813               	xorwf	PWMtimer0_48MHzCLK_config@priority,w,c
  3784  000DFC  A4D8               	btfss	status,2,c
  3785  000DFE  0012               	return	
  3786                           
  3787                           ;PWM_timer0.c: 35: IPEN = 1;
  3788  000E00  8ED0               	bsf	4048,7,c	;volatile
  3789                           
  3790                           ;PWM_timer0.c: 36: TMR0IP = 0;
  3791  000E02  94F1               	bcf	intcon2,2,c	;volatile
  3792  000E04  0012               	return	
  3793  000E06                     __end_of_PWMtimer0_48MHzCLK_config:
  3794                           	opt stack 0
  3795                           tblptru	equ	0xFF8
  3796                           tblptrh	equ	0xFF7
  3797                           tblptrl	equ	0xFF6
  3798                           tablat	equ	0xFF5
  3799                           prodh	equ	0xFF4
  3800                           prodl	equ	0xFF3
  3801                           intcon	equ	0xFF2
  3802                           intcon2	equ	0xFF1
  3803                           postinc0	equ	0xFEE
  3804                           wreg	equ	0xFE8
  3805                           indf1	equ	0xFE7
  3806                           postinc1	equ	0xFE6
  3807                           postdec1	equ	0xFE5
  3808                           plusw1	equ	0xFE3
  3809                           fsr1h	equ	0xFE2
  3810                           fsr1l	equ	0xFE1
  3811                           indf2	equ	0xFDF
  3812                           postinc2	equ	0xFDE
  3813                           postdec2	equ	0xFDD
  3814                           plusw2	equ	0xFDB
  3815                           fsr2h	equ	0xFDA
  3816                           fsr2l	equ	0xFD9
  3817                           status	equ	0xFD8
  3818                           
  3819 ;; *************** function _ISR *****************
  3820 ;; Defined at:
  3821 ;;		line 22 in file "main.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;		None
  3824 ;; Auto vars:     Size  Location     Type
  3825 ;;		None
  3826 ;; Return value:  Size  Location     Type
  3827 ;;		None               void
  3828 ;; Registers used:
  3829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3835 ;;      Params:         0       0       0       0       0       0       0       0       0
  3836 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3837 ;;      Temps:         14       0       0       0       0       0       0       0       0
  3838 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3839 ;;Total ram usage:       14 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; Hardware stack levels required when called:    1
  3842 ;; This function calls:
  3843 ;;		_PWMtimer0_B
  3844 ;;		_PWMtimer2_B
  3845 ;; This function is called by:
  3846 ;;		Interrupt level 2
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           	psect	intcode
  3851  000008                     __pintcode:
  3852                           	opt stack 0
  3853  000008                     _ISR:
  3854                           	opt stack 27
  3855                           
  3856                           ;incstack = 0
  3857  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3858  00000A  CFFA F005          	movff	pclath,??_ISR
  3859  00000E  CFFB F006          	movff	pclatu,??_ISR+1
  3860  000012  ED71  F005         	call	int_func,f	;refresh shadow registers
  3861                           pclatu	equ	0xFFB
  3862                           pclath	equ	0xFFA
  3863                           tblptru	equ	0xFF8
  3864                           tblptrh	equ	0xFF7
  3865                           tblptrl	equ	0xFF6
  3866                           tablat	equ	0xFF5
  3867                           prodh	equ	0xFF4
  3868                           prodl	equ	0xFF3
  3869                           intcon	equ	0xFF2
  3870                           intcon2	equ	0xFF1
  3871                           postinc0	equ	0xFEE
  3872                           wreg	equ	0xFE8
  3873                           indf1	equ	0xFE7
  3874                           postinc1	equ	0xFE6
  3875                           postdec1	equ	0xFE5
  3876                           plusw1	equ	0xFE3
  3877                           fsr1h	equ	0xFE2
  3878                           fsr1l	equ	0xFE1
  3879                           indf2	equ	0xFDF
  3880                           postinc2	equ	0xFDE
  3881                           postdec2	equ	0xFDD
  3882                           plusw2	equ	0xFDB
  3883                           fsr2h	equ	0xFDA
  3884                           fsr2l	equ	0xFD9
  3885                           status	equ	0xFD8
  3886                           
  3887                           	psect	intcode_body
  3888  000AE2                     __pintcode_body:
  3889                           	opt stack 27
  3890  000AE2                     int_func:
  3891                           	opt stack 27
  3892  000AE2  0006               	pop		; remove dummy address from shadow register refresh
  3893  000AE4  CFE9 F007          	movff	fsr0l,??_ISR+2
  3894  000AE8  CFEA F008          	movff	fsr0h,??_ISR+3
  3895  000AEC  CFE1 F009          	movff	fsr1l,??_ISR+4
  3896  000AF0  CFE2 F00A          	movff	fsr1h,??_ISR+5
  3897  000AF4  CFD9 F00B          	movff	fsr2l,??_ISR+6
  3898  000AF8  CFDA F00C          	movff	fsr2h,??_ISR+7
  3899  000AFC  CFF3 F00D          	movff	prodl,??_ISR+8
  3900  000B00  CFF4 F00E          	movff	prodh,??_ISR+9
  3901  000B04  CFF6 F00F          	movff	tblptrl,??_ISR+10
  3902  000B08  CFF7 F010          	movff	tblptrh,??_ISR+11
  3903  000B0C  CFF8 F011          	movff	tblptru,??_ISR+12
  3904  000B10  CFF5 F012          	movff	tablat,??_ISR+13
  3905                           
  3906                           ;main.c: 24: PWMtimer2_B(150);
  3907  000B14  0E96               	movlw	150
  3908  000B16  ECAE  F005         	call	_PWMtimer2_B
  3909                           
  3910                           ;main.c: 26: PWMtimer0_B(100);
  3911  000B1A  0E64               	movlw	100
  3912  000B1C  ECEB  F004         	call	_PWMtimer0_B
  3913  000B20  C012  FFF5         	movff	??_ISR+13,tablat
  3914  000B24  C011  FFF8         	movff	??_ISR+12,tblptru
  3915  000B28  C010  FFF7         	movff	??_ISR+11,tblptrh
  3916  000B2C  C00F  FFF6         	movff	??_ISR+10,tblptrl
  3917  000B30  C00E  FFF4         	movff	??_ISR+9,prodh
  3918  000B34  C00D  FFF3         	movff	??_ISR+8,prodl
  3919  000B38  C00C  FFDA         	movff	??_ISR+7,fsr2h
  3920  000B3C  C00B  FFD9         	movff	??_ISR+6,fsr2l
  3921  000B40  C00A  FFE2         	movff	??_ISR+5,fsr1h
  3922  000B44  C009  FFE1         	movff	??_ISR+4,fsr1l
  3923  000B48  C008  FFEA         	movff	??_ISR+3,fsr0h
  3924  000B4C  C007  FFE9         	movff	??_ISR+2,fsr0l
  3925  000B50  C006  FFFB         	movff	??_ISR+1,pclatu
  3926  000B54  C005  FFFA         	movff	??_ISR,pclath
  3927  000B58  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3928  000B5A  0011               	retfie		f
  3929  000B5C                     __end_of_ISR:
  3930                           	opt stack 0
  3931                           pclatu	equ	0xFFB
  3932                           pclath	equ	0xFFA
  3933                           tblptru	equ	0xFF8
  3934                           tblptrh	equ	0xFF7
  3935                           tblptrl	equ	0xFF6
  3936                           tablat	equ	0xFF5
  3937                           prodh	equ	0xFF4
  3938                           prodl	equ	0xFF3
  3939                           intcon	equ	0xFF2
  3940                           intcon2	equ	0xFF1
  3941                           postinc0	equ	0xFEE
  3942                           fsr0h	equ	0xFEA
  3943                           fsr0l	equ	0xFE9
  3944                           wreg	equ	0xFE8
  3945                           indf1	equ	0xFE7
  3946                           postinc1	equ	0xFE6
  3947                           postdec1	equ	0xFE5
  3948                           plusw1	equ	0xFE3
  3949                           fsr1h	equ	0xFE2
  3950                           fsr1l	equ	0xFE1
  3951                           indf2	equ	0xFDF
  3952                           postinc2	equ	0xFDE
  3953                           postdec2	equ	0xFDD
  3954                           plusw2	equ	0xFDB
  3955                           fsr2h	equ	0xFDA
  3956                           fsr2l	equ	0xFD9
  3957                           status	equ	0xFD8
  3958                           
  3959 ;; *************** function _PWMtimer2_B *****************
  3960 ;; Defined at:
  3961 ;;		line 120 in file "PMW_timer2.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;  duty            1    wreg     unsigned char 
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;  duty            1    1[COMRAM] unsigned char 
  3966 ;; Return value:  Size  Location     Type
  3967 ;;		None               void
  3968 ;; Registers used:
  3969 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3975 ;;      Params:         0       0       0       0       0       0       0       0       0
  3976 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3977 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3978 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3979 ;;Total ram usage:        2 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; This function calls:
  3982 ;;		Nothing
  3983 ;; This function is called by:
  3984 ;;		_ISR
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           	psect	text22
  3989  000B5C                     __ptext22:
  3990                           	opt stack 0
  3991  000B5C                     _PWMtimer2_B:
  3992                           	opt stack 27
  3993                           
  3994                           ;incstack = 0
  3995                           ;PWMtimer2_B@duty stored from wreg
  3996  000B5C  6E02               	movwf	PWMtimer2_B@duty,c
  3997                           
  3998                           ;PMW_timer2.c: 122: if (TMR2IF) {
  3999  000B5E  A29E               	btfss	3998,1,c	;volatile
  4000  000B60  0012               	return	
  4001                           
  4002                           ;PMW_timer2.c: 124: if(duty <= 10){
  4003  000B62  0E0B               	movlw	11
  4004  000B64  6002               	cpfslt	PWMtimer2_B@duty,c
  4005  000B66  D002               	goto	i2l1257
  4006                           
  4007                           ;PMW_timer2.c: 125: duty = 10;
  4008  000B68  0E0A               	movlw	10
  4009  000B6A  D004               	goto	L3
  4010  000B6C                     i2l1257:
  4011  000B6C  0EEF               	movlw	239
  4012  000B6E  6402               	cpfsgt	PWMtimer2_B@duty,c
  4013  000B70  D002               	goto	i2l1261
  4014                           
  4015                           ;PMW_timer2.c: 127: duty = 240;
  4016  000B72  0EF0               	movlw	240
  4017  000B74                     L3:
  4018  000B74  6E02               	movwf	PWMtimer2_B@duty,c
  4019  000B76                     i2l1261:
  4020                           
  4021                           ;PMW_timer2.c: 128: }
  4022                           ;PMW_timer2.c: 131: if ((*portB_p) & mask_B2) {
  4023  000B76  C036  FFD9         	movff	_portB_p,fsr2l
  4024  000B7A  C037  FFDA         	movff	_portB_p+1,fsr2h
  4025  000B7E  50DF               	movf	indf2,w,c
  4026  000B80  1441               	andwf	_mask_B2,w,c
  4027  000B82  0900               	iorlw	0
  4028  000B84  B4D8               	btfsc	status,2,c
  4029  000B86  D010               	goto	i2l1269
  4030                           
  4031                           ;PMW_timer2.c: 132: *portB_p &= (~mask_B2);
  4032  000B88  5041               	movf	_mask_B2,w,c
  4033  000B8A  0AFF               	xorlw	255
  4034  000B8C  6E01               	movwf	??_PWMtimer2_B& (0+255),c
  4035  000B8E  C036  FFD9         	movff	_portB_p,fsr2l
  4036  000B92  C037  FFDA         	movff	_portB_p+1,fsr2h
  4037  000B96  5001               	movf	??_PWMtimer2_B,w,c
  4038  000B98  16DF               	andwf	indf2,f,c
  4039                           
  4040                           ;PMW_timer2.c: 134: PR2 = 250 - duty;
  4041  000B9A  5002               	movf	PWMtimer2_B@duty,w,c
  4042  000B9C  0800               	sublw	0
  4043  000B9E  0FFA               	addlw	250
  4044  000BA0  6ECB               	movwf	4043,c	;volatile
  4045                           
  4046                           ;PMW_timer2.c: 135: true_duty_B = duty;
  4047  000BA2  C002  F043         	movff	PWMtimer2_B@duty,_true_duty_B
  4048                           
  4049                           ;PMW_timer2.c: 136: } else {
  4050  000BA6  D008               	goto	i2l1273
  4051  000BA8                     i2l1269:
  4052                           
  4053                           ;PMW_timer2.c: 137: *portB_p |= mask_B2;
  4054  000BA8  C036  FFD9         	movff	_portB_p,fsr2l
  4055  000BAC  C037  FFDA         	movff	_portB_p+1,fsr2h
  4056  000BB0  5041               	movf	_mask_B2,w,c
  4057  000BB2  12DF               	iorwf	indf2,f,c
  4058                           
  4059                           ;PMW_timer2.c: 139: PR2 = true_duty_B;
  4060  000BB4  C043  FFCB         	movff	_true_duty_B,4043	;volatile
  4061  000BB8                     i2l1273:
  4062                           
  4063                           ;PMW_timer2.c: 140: }
  4064                           ;PMW_timer2.c: 143: TMR2IF = 0;
  4065  000BB8  929E               	bcf	3998,1,c	;volatile
  4066  000BBA  0012               	return	
  4067  000BBC                     __end_of_PWMtimer2_B:
  4068                           	opt stack 0
  4069                           pclatu	equ	0xFFB
  4070                           pclath	equ	0xFFA
  4071                           tblptru	equ	0xFF8
  4072                           tblptrh	equ	0xFF7
  4073                           tblptrl	equ	0xFF6
  4074                           tablat	equ	0xFF5
  4075                           prodh	equ	0xFF4
  4076                           prodl	equ	0xFF3
  4077                           intcon	equ	0xFF2
  4078                           intcon2	equ	0xFF1
  4079                           postinc0	equ	0xFEE
  4080                           fsr0h	equ	0xFEA
  4081                           fsr0l	equ	0xFE9
  4082                           wreg	equ	0xFE8
  4083                           indf1	equ	0xFE7
  4084                           postinc1	equ	0xFE6
  4085                           postdec1	equ	0xFE5
  4086                           plusw1	equ	0xFE3
  4087                           fsr1h	equ	0xFE2
  4088                           fsr1l	equ	0xFE1
  4089                           indf2	equ	0xFDF
  4090                           postinc2	equ	0xFDE
  4091                           postdec2	equ	0xFDD
  4092                           plusw2	equ	0xFDB
  4093                           fsr2h	equ	0xFDA
  4094                           fsr2l	equ	0xFD9
  4095                           status	equ	0xFD8
  4096                           
  4097 ;; *************** function _PWMtimer0_B *****************
  4098 ;; Defined at:
  4099 ;;		line 128 in file "PWM_timer0.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;  duty            1    wreg     unsigned char 
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;  duty            1    3[COMRAM] unsigned char 
  4104 ;;  time            2    1[COMRAM] unsigned int 
  4105 ;; Return value:  Size  Location     Type
  4106 ;;		None               void
  4107 ;; Registers used:
  4108 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4114 ;;      Params:         0       0       0       0       0       0       0       0       0
  4115 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4116 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4117 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4118 ;;Total ram usage:        4 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; This function calls:
  4121 ;;		Nothing
  4122 ;; This function is called by:
  4123 ;;		_ISR
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           	psect	text23
  4128  0009D6                     __ptext23:
  4129                           	opt stack 0
  4130  0009D6                     _PWMtimer0_B:
  4131                           	opt stack 27
  4132                           
  4133                           ;incstack = 0
  4134                           ;PWMtimer0_B@duty stored from wreg
  4135  0009D6  6E04               	movwf	PWMtimer0_B@duty,c
  4136                           
  4137                           ;PWM_timer0.c: 130: if (TMR0IF) {
  4138  0009D8  A4F2               	btfss	intcon,2,c	;volatile
  4139  0009DA  0012               	return	
  4140                           
  4141                           ;PWM_timer0.c: 132: unsigned int time;
  4142                           ;PWM_timer0.c: 134: if (duty <= 10) {
  4143  0009DC  0E0B               	movlw	11
  4144  0009DE  6004               	cpfslt	PWMtimer0_B@duty,c
  4145  0009E0  D002               	goto	i2l1281
  4146                           
  4147                           ;PWM_timer0.c: 135: duty = 10;
  4148  0009E2  0E0A               	movlw	10
  4149  0009E4  D004               	goto	L4
  4150  0009E6                     i2l1281:
  4151  0009E6  0EEF               	movlw	239
  4152  0009E8  6404               	cpfsgt	PWMtimer0_B@duty,c
  4153  0009EA  D002               	goto	i2l1285
  4154                           
  4155                           ;PWM_timer0.c: 137: duty = 240;
  4156  0009EC  0EF0               	movlw	240
  4157  0009EE                     L4:
  4158  0009EE  6E04               	movwf	PWMtimer0_B@duty,c
  4159  0009F0                     i2l1285:
  4160                           
  4161                           ;PWM_timer0.c: 138: }
  4162                           ;PWM_timer0.c: 140: if ((*portB_p0) & mask_B) {
  4163  0009F0  C038  FFD9         	movff	_portB_p0,fsr2l
  4164  0009F4  C039  FFDA         	movff	_portB_p0+1,fsr2h
  4165  0009F8  50DF               	movf	indf2,w,c
  4166  0009FA  1440               	andwf	_mask_B,w,c
  4167  0009FC  0900               	iorlw	0
  4168  0009FE  B4D8               	btfsc	status,2,c
  4169  000A00  D022               	goto	i2l1297
  4170                           
  4171                           ;PWM_timer0.c: 141: *portB_p0 &= (~mask_B);
  4172  000A02  5040               	movf	_mask_B,w,c
  4173  000A04  0AFF               	xorlw	255
  4174  000A06  6E01               	movwf	??_PWMtimer0_B& (0+255),c
  4175  000A08  C038  FFD9         	movff	_portB_p0,fsr2l
  4176  000A0C  C039  FFDA         	movff	_portB_p0+1,fsr2h
  4177  000A10  5001               	movf	??_PWMtimer0_B,w,c
  4178  000A12  16DF               	andwf	indf2,f,c
  4179                           
  4180                           ;PWM_timer0.c: 143: time = 53535 + 48 * duty;
  4181  000A14  5004               	movf	PWMtimer0_B@duty,w,c
  4182  000A16  0D30               	mullw	48
  4183  000A18  0E1F               	movlw	31
  4184  000A1A  24F3               	addwf	prodl,w,c
  4185  000A1C  6E02               	movwf	PWMtimer0_B@time,c
  4186  000A1E  0ED1               	movlw	209
  4187  000A20  20F4               	addwfc	prodh,w,c
  4188  000A22  6E03               	movwf	PWMtimer0_B@time+1,c
  4189                           
  4190                           ;PWM_timer0.c: 144: TMR0H = (time >> 8);
  4191  000A24  5003               	movf	PWMtimer0_B@time+1,w,c
  4192  000A26  6ED7               	movwf	4055,c	;volatile
  4193                           
  4194                           ;PWM_timer0.c: 145: TMR0L = (time & 0x00FF);
  4195  000A28  C002  FFD6         	movff	PWMtimer0_B@time,4054	;volatile
  4196                           
  4197                           ;PWM_timer0.c: 147: true_duty0_B = 65535 - 48 * duty;
  4198  000A2C  5004               	movf	PWMtimer0_B@duty,w,c
  4199  000A2E  0D30               	mullw	48
  4200  000A30  1EF3               	comf	prodl,f,c
  4201  000A32  1EF4               	comf	prodh,f,c
  4202  000A34  4AF3               	infsnz	prodl,f,c
  4203  000A36  2AF4               	incf	prodh,f,c
  4204  000A38  0EFF               	movlw	255
  4205  000A3A  24F3               	addwf	prodl,w,c
  4206  000A3C  6E3C               	movwf	_true_duty0_B,c
  4207  000A3E  0EFF               	movlw	255
  4208  000A40  20F4               	addwfc	prodh,w,c
  4209  000A42  6E3D               	movwf	_true_duty0_B+1,c
  4210                           
  4211                           ;PWM_timer0.c: 148: } else {
  4212  000A44  D00A               	goto	i2l1303
  4213  000A46                     i2l1297:
  4214                           
  4215                           ;PWM_timer0.c: 149: *portB_p0 |= mask_B;
  4216  000A46  C038  FFD9         	movff	_portB_p0,fsr2l
  4217  000A4A  C039  FFDA         	movff	_portB_p0+1,fsr2h
  4218  000A4E  5040               	movf	_mask_B,w,c
  4219  000A50  12DF               	iorwf	indf2,f,c
  4220                           
  4221                           ;PWM_timer0.c: 151: TMR0H = (true_duty0_B >> 8);
  4222  000A52  503D               	movf	_true_duty0_B+1,w,c
  4223  000A54  6ED7               	movwf	4055,c	;volatile
  4224                           
  4225                           ;PWM_timer0.c: 152: TMR0L = (true_duty0_B & 0x00FF);
  4226  000A56  C03C  FFD6         	movff	_true_duty0_B,4054	;volatile
  4227  000A5A                     i2l1303:
  4228                           
  4229                           ;PWM_timer0.c: 153: }
  4230                           ;PWM_timer0.c: 156: TMR0IF = 0;
  4231  000A5A  94F2               	bcf	intcon,2,c	;volatile
  4232  000A5C  0012               	return	
  4233  000A5E                     __end_of_PWMtimer0_B:
  4234                           	opt stack 0
  4235  0000                     pclatu	equ	0xFFB
  4236                           pclath	equ	0xFFA
  4237                           tblptru	equ	0xFF8
  4238                           tblptrh	equ	0xFF7
  4239                           tblptrl	equ	0xFF6
  4240                           tablat	equ	0xFF5
  4241                           prodh	equ	0xFF4
  4242                           prodl	equ	0xFF3
  4243                           intcon	equ	0xFF2
  4244                           intcon2	equ	0xFF1
  4245                           postinc0	equ	0xFEE
  4246                           fsr0h	equ	0xFEA
  4247                           fsr0l	equ	0xFE9
  4248                           wreg	equ	0xFE8
  4249                           indf1	equ	0xFE7
  4250                           postinc1	equ	0xFE6
  4251                           postdec1	equ	0xFE5
  4252                           plusw1	equ	0xFE3
  4253                           fsr1h	equ	0xFE2
  4254                           fsr1l	equ	0xFE1
  4255                           indf2	equ	0xFDF
  4256                           postinc2	equ	0xFDE
  4257                           postdec2	equ	0xFDD
  4258                           plusw2	equ	0xFDB
  4259                           fsr2h	equ	0xFDA
  4260                           fsr2l	equ	0xFD9
  4261                           status	equ	0xFD8
  4262                           pclatu	equ	0xFFB
  4263                           pclath	equ	0xFFA
  4264                           tblptru	equ	0xFF8
  4265                           tblptrh	equ	0xFF7
  4266                           tblptrl	equ	0xFF6
  4267                           tablat	equ	0xFF5
  4268                           prodh	equ	0xFF4
  4269                           prodl	equ	0xFF3
  4270                           intcon	equ	0xFF2
  4271                           intcon2	equ	0xFF1
  4272                           postinc0	equ	0xFEE
  4273                           fsr0h	equ	0xFEA
  4274                           fsr0l	equ	0xFE9
  4275                           wreg	equ	0xFE8
  4276                           indf1	equ	0xFE7
  4277                           postinc1	equ	0xFE6
  4278                           postdec1	equ	0xFE5
  4279                           plusw1	equ	0xFE3
  4280                           fsr1h	equ	0xFE2
  4281                           fsr1l	equ	0xFE1
  4282                           indf2	equ	0xFDF
  4283                           postinc2	equ	0xFDE
  4284                           postdec2	equ	0xFDD
  4285                           plusw2	equ	0xFDB
  4286                           fsr2h	equ	0xFDA
  4287                           fsr2l	equ	0xFD9
  4288                           status	equ	0xFD8
  4289                           
  4290                           	psect	rparam
  4291  0000                     pclatu	equ	0xFFB
  4292                           pclath	equ	0xFFA
  4293                           tblptru	equ	0xFF8
  4294                           tblptrh	equ	0xFF7
  4295                           tblptrl	equ	0xFF6
  4296                           tablat	equ	0xFF5
  4297                           prodh	equ	0xFF4
  4298                           prodl	equ	0xFF3
  4299                           intcon	equ	0xFF2
  4300                           intcon2	equ	0xFF1
  4301                           postinc0	equ	0xFEE
  4302                           fsr0h	equ	0xFEA
  4303                           fsr0l	equ	0xFE9
  4304                           wreg	equ	0xFE8
  4305                           indf1	equ	0xFE7
  4306                           postinc1	equ	0xFE6
  4307                           postdec1	equ	0xFE5
  4308                           plusw1	equ	0xFE3
  4309                           fsr1h	equ	0xFE2
  4310                           fsr1l	equ	0xFE1
  4311                           indf2	equ	0xFDF
  4312                           postinc2	equ	0xFDE
  4313                           postdec2	equ	0xFDD
  4314                           plusw2	equ	0xFDB
  4315                           fsr2h	equ	0xFDA
  4316                           fsr2l	equ	0xFD9
  4317                           status	equ	0xFD8
  4318                           
  4319                           	psect	temp
  4320  000044                     btemp:
  4321                           	opt stack 0
  4322  000044                     	ds	1
  4323  0000                     int$flags	set	btemp
  4324                           pclatu	equ	0xFFB
  4325                           pclath	equ	0xFFA
  4326                           tblptru	equ	0xFF8
  4327                           tblptrh	equ	0xFF7
  4328                           tblptrl	equ	0xFF6
  4329                           tablat	equ	0xFF5
  4330                           prodh	equ	0xFF4
  4331                           prodl	equ	0xFF3
  4332                           intcon	equ	0xFF2
  4333                           intcon2	equ	0xFF1
  4334                           postinc0	equ	0xFEE
  4335                           fsr0h	equ	0xFEA
  4336                           fsr0l	equ	0xFE9
  4337                           wreg	equ	0xFE8
  4338                           indf1	equ	0xFE7
  4339                           postinc1	equ	0xFE6
  4340                           postdec1	equ	0xFE5
  4341                           plusw1	equ	0xFE3
  4342                           fsr1h	equ	0xFE2
  4343                           fsr1l	equ	0xFE1
  4344                           indf2	equ	0xFDF
  4345                           postinc2	equ	0xFDE
  4346                           postdec2	equ	0xFDD
  4347                           plusw2	equ	0xFDB
  4348                           fsr2h	equ	0xFDA
  4349                           fsr2l	equ	0xFD9
  4350                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        45
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     49      67
    BANK0           160     53     158
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    PWMtimer0_B_pin@tris	PTR unsigned char  size(2) Largest target is 1
		 -> TRISD(SFR[1]), 

    PWMtimer0_B_pin@tris_p	PTR unsigned char  size(2) Largest target is 1
		 -> TRISD(SFR[1]), 

    PWMtimer0_B_pin@port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR[1]), 

    portB_p0	PTR unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), PORTD(SFR[1]), 

    portA_p0	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    PWMtimer2_B_pin@tris	PTR unsigned char  size(2) Largest target is 1
		 -> TRISD(SFR[1]), 

    PWMtimer2_B_pin@tris_p	PTR unsigned char  size(2) Largest target is 1
		 -> TRISD(SFR[1]), 

    PWMtimer2_B_pin@port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTD(SFR[1]), 

    portB_p	PTR unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), PORTD(SFR[1]), 

    portA_p	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    conversorAD_config@port_an	PTR unsigned char [13] size(2) Largest target is 1
		 -> TRISB(SFR[1]), TRISE(SFR[1]), TRISA(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_read_sensorns
    _read_sensorns->___awdiv
    _moving_avarege->___aldiv
    _calibrates_sensors->_valor_AD
    ___lwmod->___lwdiv
    _DonPimpolhoBoard_init->_PWMtimer0_B_pin
    _DonPimpolhoBoard_init->_PWMtimer2_B_pin

Critical Paths under _ISR in COMRAM

    _ISR->_PWMtimer0_B

Critical Paths under _main in BANK0

    _DonPimpolhoBoard_init->_conversorAD_config

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   12264
                                             41 BANK0     12    12      0
              _DonPimpolhoBoard_init
                            ___lwdiv
                            ___lwmod
                 _calibrates_sensors
                        _enviaSerial
                     _moving_avarege
                      _read_sensorns
                _return_distanceLine
                      _serial_config
 ---------------------------------------------------------------------------------
 (1) _serial_config                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _return_distanceLine                                  2     0      2       0
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _read_sensorns                                       23    22      1    4801
                                             26 COMRAM    23    22      1
                            ___awdiv
                            ___lwdiv
                             ___wmul
                           _valor_AD
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1534
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1319
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     599
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _moving_avarege                                      14    12      2     973
                                             32 COMRAM    14    12      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     599
                                             18 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _enviaSerial                                          1     1      0      31
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _calibrates_sensors                                  22    22      0     631
                                             23 COMRAM    22    22      0
                           _valor_AD
 ---------------------------------------------------------------------------------
 (2) _valor_AD                                             5     3      2      80
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4    1772
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _DonPimpolhoBoard_init                                0     0      0    2112
          _PWMtimer0_48MHzCLK_config
                    _PWMtimer0_B_pin
                       _PWMtimer0_on
          _PWMtimer2_48MHzCLK_config
                    _PWMtimer2_B_pin
                       _PWMtimer2_on
                 _conversorAD_config
 ---------------------------------------------------------------------------------
 (2) _conversorAD_config                                  46    44      2     932
                                             18 COMRAM     5     3      2
                                              0 BANK0     41    41      0
 ---------------------------------------------------------------------------------
 (2) _PWMtimer2_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWMtimer2_B_pin                                      9     4      5     497
                                             18 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (2) _PWMtimer2_48MHzCLK_config                            1     1      0      93
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _PWMtimer0_on                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWMtimer0_B_pin                                      9     4      5     497
                                             18 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (2) _PWMtimer0_48MHzCLK_config                            1     1      0      93
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 14    14      0     150
                                              4 COMRAM    14    14      0
                        _PWMtimer0_B
                        _PWMtimer2_B
 ---------------------------------------------------------------------------------
 (4) _PWMtimer2_B                                          2     2      0      60
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _PWMtimer0_B                                          4     4      0      90
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DonPimpolhoBoard_init
     _PWMtimer0_48MHzCLK_config
     _PWMtimer0_B_pin
     _PWMtimer0_on
     _PWMtimer2_48MHzCLK_config
     _PWMtimer2_B_pin
     _PWMtimer2_on
     _conversorAD_config
   ___lwdiv
   ___lwmod
     ___lwdiv (ARG)
   _calibrates_sensors
     _valor_AD
   _enviaSerial
   _moving_avarege
     ___aldiv
   _read_sensorns
     ___awdiv
     ___lwdiv
     ___wmul
     _valor_AD
   _return_distanceLine
   _serial_config

 _ISR (ROOT)
   _PWMtimer0_B
   _PWMtimer2_B

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     35      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     31      43       1       71.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E1      20        0.0%
DATA                 0      0      E1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Sep 30 21:52:37 2016

                                _GO 007E11                        ___awdiv@sign 0018  
       ??_PWMtimer2_48MHzCLK_config 0013                 ___wmul@multiplicand 0015  
                       __CFG_BORV$3 000000                        __CFG_CP0$OFF 000000  
                      __CFG_CP1$OFF 000000                        __CFG_CP2$OFF 000000  
                      __CFG_CP3$OFF 000000                                 l125 0C86  
                               l360 077E                                 l346 0E74  
                               l294 007E                                 l289 0908  
                               l299 01C4                                 l766 0C5A  
                               l776 0D24                                 _GIE 007F97  
                      __CFG_CPB$OFF 000000                                 _RB0 007C08  
                               _RC0 007C10                                 _RD1 007C19  
                               _RD3 007C1B                                 _RD5 007C1D  
                               _PR2 000FCB                        __CFG_CPD$OFF 000000  
                               _ISR 0008                                 _PSA 007EAB  
                      __CFG_BOR$OFF 000000         conversorAD_config@port_mask 009C  
                               _pwm 0096                                 prod 000FF3  
                               wreg 000FE8                        __CFG_FOSC$HS 000000  
                      __CFG_LVP$OFF 000000                                ?_ISR 0001  
                      __CFG_WDT$OFF 000000                                l2121 0692  
                              l2113 0684                                l2203 0D42  
                              l2123 069A                                l2115 0686  
                              l2127 06DA                                l2119 0690  
                              l2311 0AA0                                l2303 0A82  
                              l2161 0DF8                                l2321 0AC0  
                              l2313 0AA4                                l2171 0D82  
                              l2253 0926                                l2309 0A98  
                              l2325 0ACA                                l2341 0C30  
                              l2405 0034                                l2167 0D78  
                              l2351 0C50                                l2343 0C34  
                              l2511 0398                                l2193 0E44  
                              l2265 0960                                l2281 09AE  
                              l2329 0AD8                                l2433 01A8  
                              l2425 0180                                l2417 00B2  
                              l2441 01C8                                l2409 003C  
                              l2267 096C                                l2259 093E  
                              l2339 0C28                                l2451 0316  
                              l2285 09C4                                l2277 09A0  
                              l2269 0970                                l2461 0732  
                              l2517 03A2                                l2199 0D38  
                              l2473 079E                                l2457 0724  
                              l2297 0A72                                l2449 029E  
                              l2491 0CFA                                l2395 08A2  
                              l2493 0D02                                l2389 0826  
                              l2469 078E                                l2557 05A8  
                              l2495 0D06                                l2399 08FE  
                              l2479 07E0                                l2499 0D1A  
                              _ADFM 007E07                                _ADON 007E10  
                              _BRGH 007D62                                _CREN 007D5C  
                              _T0CS 007EAD                                _DONE 007E11  
                              _T0SE 007EAC                                u1291 05D2  
                              u1570 0824                                u1810 05A6  
                              u1820 05C2                                u1645 00DC  
                              _IPEN 007E87                                _OERR 007D59  
                      ?_enviaSerial 0001                                _SREN 007D5D  
                              _TXIF 007CF4                                _SYNC 007D64  
                              _main 037E                                _vals 0060  
                              fsr0h 000FEA                                fsr1h 000FE2  
                              fsr0l 000FE9                                fsr2h 000FDA  
                              indf1 000FE7                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              btemp 0044                                pclat 000FFA  
                              prodh 000FF4                                prodl 000FF3  
                              start 0016                       __CFG_IESO$OFF 000000  
                       _true_duty_A 0042                         _true_duty_B 0043  
                      ___param_bank 000010               conversorAD_config@neg 0013  
             conversorAD_config@pos 00A9                               ??_ISR 0005  
  read_sensorns@num_over_limit_line 0029                     __end_of___aldiv 09D6  
                      main@filtered 00CD                               _ADCS0 007E00  
                             _ADCS1 007E01                               _ADCS2 007E02  
                             ?_main 0001                               _ACQT0 007E03  
                             _ACQT1 007E04                               _ACQT2 007E05  
                   __end_of___awdiv 0AE2                               _BRG16 007DC3  
                             _T0CON 000FD5                     ___awdiv@divisor 0015  
                             _T2CON 000FCA                     __end_of___lwdiv 0C64  
                   __end_of___lwmod 0D2E          read_sensorns@third_portion 002A  
                   ___awdiv@counter 0017                               _RCREG 000FAE  
                             _RCSTA 000FAB                               _TMR0H 000FD7  
                             _TMR0L 000FD6                               _SPBRG 000FAF  
                             _PORTD 000F83                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISD 000F95  
                             _TRISE 000F96                               _TXREG 000FAD  
                             _TXSTA 000FAC                       __CFG_PWRT$OFF 000000  
                     __CFG_WRT0$OFF 000000                       __CFG_WRT1$OFF 000000  
                     __CFG_WRT2$OFF 000000                       __CFG_WRT3$OFF 000000  
                       _PWMtimer0_B 09D6                         _PWMtimer2_B 0B5C  
                    __CFG_EBTR0$OFF 000000                      __CFG_FCMEN$OFF 000000  
                    __CFG_EBTR1$OFF 000000                      __CFG_EBTR2$OFF 000000  
                    __CFG_EBTR3$OFF 000000                       __CFG_WRTB$OFF 000000  
                     __CFG_WRTC$OFF 000000                       __CFG_WRTD$OFF 000000  
                    __CFG_EBTRB$OFF 000000                               main@j 00C5  
         _PWMtimer2_48MHzCLK_config 0E2C                               tablat 000FF5  
                             plusw1 000FE3                               plusw2 000FDB  
                             status 000FD8                      __CFG_ICPRT$OFF 000000  
       __size_of_conversorAD_config 0148                        _true_duty0_A 003A  
                      _true_duty0_B 003C                      __CFG_MCLRE$OFF 000000  
                   __initialization 0CAA                        __end_of_main 05C4  
             __size_of_PWMtimer0_on 0008               __size_of_PWMtimer2_on 0008  
                            ??_main 0032                       __activetblptr 000000  
              read_sensorns@valueAD 002E                      _second_portion 00E1  
__size_of_PWMtimer0_48MHzCLK_config 002A                     __CFG_CCP2MX$OFF 000000  
          __size_of_PWMtimer0_B_pin 0040      __size_of_DonPimpolhoBoard_init 0056  
          __size_of_PWMtimer2_B_pin 0040       __end_of_DonPimpolhoBoard_init 0C12  
                            _ADCON0 000FC2                              _ADCON1 000FC1  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                  ___awdiv@dividend 0013                              i2l1303 0A5A  
                            i2l1261 0B76                              i2l1281 09E6  
                            i2l1273 0BB8                              i2l1257 0B6C  
                            i2l1285 09F0                              i2l1269 0BA8  
                            i2l1297 0A46                              _TMR0IE 007F95  
                            _TMR0IF 007F92                              _TMR2IE 007CE9  
                            _TMR2IF 007CF1                              _TMR0IP 007F8A  
                            _TMR2IP 007CF9                              _TMR0ON 007EAF  
                            _SPBRGH 000FB0             read_sensorns@color_line 0026  
                            _TMR2ON 007E52                              _TRISB0 007C98  
                            _TRISC0 007CA0                              _TRISD1 007CA9  
                            _TRISD3 007CAB                              _TRISC6 007CA6  
                            _TRISD5 007CAD                              _TRISC7 007CA7  
               calibrates_sensors@i 002C                        _PWMtimer0_on 0E90  
                      _PWMtimer2_on 0E88                      __CFG_XINST$OFF 000000  
                   PWMtimer0_B@duty 0004                     PWMtimer0_B@time 0002  
                   PWMtimer2_B@duty 0002                           ??___aldiv 001B  
                            ___wmul 0E06                           ??___awdiv 0017  
                         ??___lwdiv 0017                           ??___lwmod 001E  
                            _mask_A 003E                              _mask_B 0040  
                            clear_0 0CB0                              clear_1 0CBC  
                  ___awdiv@quotient 0019                  _calibrates_sensors 080E  
                  __end_of_valor_AD 0CAA                              tblptrh 000FF7  
                            tblptrl 000FF6                              tblptru 000FF8  
               ?_calibrates_sensors 0001                          __accesstop 0060  
           __end_of__initialization 0CE2                     __CFG_PBADEN$OFF 000000  
           conversorAD_config@F4451 00F1                        enviaSerial@c 0013  
              __size_of_enviaSerial 000C                       ___rparam_used 000001  
             PWMtimer0_B_pin@tris_p 0018              __size_of_read_sensorns 0364  
               conversorAD_config@i 00C4               __end_of_serial_config 0E72  
                    __pcstackCOMRAM 0001                        __pidataBANK0 0DAE  
              ??_calibrates_sensors 0018             read_sensorns@var_assist 0027  
      __size_of_return_distanceLine 000A   PWMtimer2_48MHzCLK_config@priority 0013  
                        __pbssBANK0 0060                 PWMtimer0_B_pin@mask 001B  
               PWMtimer0_B_pin@pino 0017                 PWMtimer0_B_pin@port 0013  
               PWMtimer0_B_pin@tris 0015                   ??_PWMtimer0_B_pin 0018  
                 ??_PWMtimer2_B_pin 0018  __size_of_PWMtimer2_48MHzCLK_config 0026  
                           ?___wmul 0013                     moving_avarege@i 002D  
                           _BAUDCON 000FB8                       _read_sensorns 001A  
                      ?_PWMtimer0_B 0001                        ?_PWMtimer2_B 0001  
           __size_of_moving_avarege 0102                   moving_avarege@sum 0029  
               PWMtimer2_B_pin@mask 001B                 PWMtimer2_B_pin@pino 0017  
               PWMtimer2_B_pin@port 0013                 PWMtimer2_B_pin@tris 0015  
                   __CFG_VREGEN$OFF 000000                             __Hparam 0000  
                           __Lparam 0000                           ?_valor_AD 0013  
                           ___aldiv 090A                             ___awdiv 0A5E  
                   __size_of___wmul 0026                             ___lwdiv 0C12  
                           ___lwmod 0CEC                     __CFG_STVREN$OFF 000000  
                  PWMtimer0_B_pin@i 001A                             __pcinit 0CAA  
                           __ramtop 0800                             __ptext0 037E  
                           __ptext1 0E52                             __ptext2 0E7E  
      read_sensorns@threshold_value 001B                             __ptext3 001A  
                           __ptext4 0E06                             __ptext5 0C12  
                           __ptext6 0A5E                             __ptext7 070C  
                           __ptext8 090A                             __ptext9 0E72  
                  PWMtimer2_B_pin@i 001A                             _mask_A2 003F  
                           _mask_B2 0041                        __size_of_ISR 0B54  
                    ?_read_sensorns 001B                    ___aldiv@dividend 0013  
                           _portA_p 0032                             _portB_p 0036  
                    __pintcode_body 0AE2                end_of_initialization 0CE2  
        __end_of_conversorAD_config 070C                             int_func 0AE2  
                        ??_valor_AD 0015                    ___aldiv@quotient 001D  
                           postdec1 000FE5                             postdec2 000FDD  
                           postinc0 000FEE                             postinc1 000FE6  
                           postinc2 000FDE                          _sensor_bar 008E  
                    valor_AD@chanel 0015               _DonPimpolhoBoard_init 0BBC  
               _return_distanceLine 0E7E               PWMtimer2_B_pin@tris_p 0018  
                    __end_of___wmul 0E2C                ?_return_distanceLine 0013  
          conversorAD_config@chanel 0014                     ??_read_sensorns 001C  
               start_initialization 0CAA                     _PWMtimer0_B_pin 0D6E  
                       __end_of_ISR 0B5C                     _PWMtimer2_B_pin 0D2E  
                    _moving_avarege 070C      calibrates_sensors@bar_sensorns 001C  
              __size_of_PWMtimer0_B 0088                __size_of_PWMtimer2_B 0060  
                     ??_enviaSerial 0013          ?_PWMtimer0_48MHzCLK_config 0001  
                          ??___wmul 0017              read_sensorns@max_index 0030  
       __size_of_calibrates_sensors 00FC                         __pdataBANK0 00D1  
             ??_return_distanceLine 0015                    __CFG_LPT1OSC$OFF 000000  
            __end_of_moving_avarege 080E                         __pbssCOMRAM 0032  
                     __pcstackBANK0 009C              __size_of_serial_config 0020  
            ?_DonPimpolhoBoard_init 0001              read_sensorns@num_fired 002D  
 __end_of_PWMtimer0_48MHzCLK_config 0E06                 __end_of_enviaSerial 0E7E  
                  ___lwdiv@dividend 0013                           __pintcode 0008  
                          ?___aldiv 0013                            ?___awdiv 0013  
                          ?___lwdiv 0013                   __size_of_valor_AD 0046  
                          ?___lwmod 001A       read_sensorns@index_over_limit 002C  
           __end_of_PWMtimer0_B_pin 0DAE             __end_of_PWMtimer2_B_pin 0D6E  
                   ?_moving_avarege 0021                    ___lwdiv@quotient 0018  
         conversorAD_config@port_an 00AA                     ___aldiv@divisor 0017  
                   ___aldiv@counter 001B                      ___wmul@product 0017  
                     ?_PWMtimer0_on 0001                       ?_PWMtimer2_on 0001  
                  __CFG_WDTPS$32768 000000                       _serial_config 0E52  
        ?_PWMtimer2_48MHzCLK_config 0001                  _conversorAD_config 05C4  
                 ___wmul@multiplier 0013                        _MAX_sensorns 007E  
               ?_conversorAD_config 0013                           main@valor 00CF  
                         copy_data0 0CD6                         _enviaSerial 0E72  
                    ??_PWMtimer0_on 0013                      ??_PWMtimer2_on 0013  
              ??_conversorAD_config 0015                            __Hrparam 0000  
                          __Lrparam 0000                      ?_serial_config 0001  
                      _MIN_sensorns 00D1                    __size_of___aldiv 00CC  
                  __size_of___awdiv 0084                    __size_of___lwdiv 0052  
                  __size_of___lwmod 0042   __end_of_PWMtimer2_48MHzCLK_config 0E52  
                  ?_PWMtimer0_B_pin 0013                    ?_PWMtimer2_B_pin 0013  
                          _main$824 00C9                            _main$825 00CB  
                   ___lwdiv@divisor 0015                     ___lwdiv@counter 0017  
                          __ptext10 080E                            __ptext11 0C64  
                          __ptext20 0DDC                            __ptext12 0CEC  
                          __ptext13 0BBC                            __ptext22 0B5C  
                          __ptext14 05C4                            __ptext23 09D6  
                          __ptext15 0E88                            __ptext16 0D2E  
                          __ptext17 0E2C                            __ptext18 0E90  
                          __ptext19 0D6E         ??_PWMtimer0_48MHzCLK_config 0013  
                     __size_of_main 0246                            _valor_AD 0C64  
                          _portA_p0 0034                            _portB_p0 0038  
                          int$flags 0044               __end_of_read_sensorns 037E  
                     ??_PWMtimer0_B 0001                       ??_PWMtimer2_B 0001  
           ??_DonPimpolhoBoard_init 001C                            intlevel2 0000  
                  ___lwmod@dividend 001A   PWMtimer0_48MHzCLK_config@priority 0013  
           moving_avarege@new_lavue 0021                     ??_serial_config 0013  
       __end_of_return_distanceLine 0E88          __end_of_calibrates_sensors 090A  
                   valor_AD@ADvalor 0016           _PWMtimer0_48MHzCLK_config 0DDC  
                  ??_moving_avarege 0023                     ___lwmod@divisor 001C  
              __end_of_PWMtimer0_on 0E98                __end_of_PWMtimer2_on 0E90  
                   ___lwmod@counter 001E                        ___aldiv@sign 001C  
                     _distance_line 009A                 __end_of_PWMtimer0_B 0A5E  
               __end_of_PWMtimer2_B 0BBC                      read_sensorns@i 0031  
